/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package java_system;


import java.util.List;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Dictionary;
import java.util.Hashtable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.awt.Color;

/**
 *
 * The page that shows the log files.
 */
public class viewLogs extends javax.swing.JFrame {
    
    int mousepX;
    int mousepY;
    


    DefaultTableModel model; 
    /**
     * Creates new form viewLogs
     */
    Connection con = null;
    PreparedStatement ps = null;
    ResultSet rs = null;
    public viewLogs() {
        initComponents();
    }
    
    /** Creates new form viewLogs
     * 
     * @param staffID sets staffID to StaffIDLabel to be displayed on viewLogs page.
     * @param firstName  sets firstName to StaffNameLabel to be displayed on viewLogs page.
     * @param role sets role to StaffRoleLabel to be displayed on viewLogs page.
     */
    public viewLogs(String staffID,String firstName, String role) {
        initComponents();
        StaffIDLable.setText(staffID); 
        StaffNameLable.setText(firstName);
        StaffRoleLable.setText(role);
        
        
          
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButtonViewEx2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1ViewEx = new javax.swing.JTable();
        dateField = new org.jdesktop.swingx.JXDatePicker();
        jButton9 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable1ViewEx3 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton6 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButtonViewEx3 = new javax.swing.JButton();
        jButtonViewEx = new javax.swing.JButton();
        jButtonViewEx1 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1ViewEx1 = new javax.swing.JTable();
        jButton11 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jButton7 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable1ViewEx2 = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel15 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        StaffNameLable = new javax.swing.JLabel();
        StaffIDLable = new javax.swing.JLabel();
        StaffRoleLable = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(238, 238, 238));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButtonViewEx2.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        jButtonViewEx2.setText("View Ticket Sales Log");
        jButtonViewEx2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViewEx2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonViewEx2, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 150, 174, -1));

        jTable1ViewEx.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Y        M   D   H   M   S    Rate   Currency"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1ViewEx);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 530, 95));
        jPanel1.add(dateField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jButton9.setText("Put Log Content to Database");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton9, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 150, -1, -1));

        jButton1.setText("Put Log Content to Database");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 320, -1, -1));

        jTable1ViewEx3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Y        M   D   H   M   S  bIID                    stfIID type status bnum comID dateR dateA coup exID taxID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(jTable1ViewEx3);

        jPanel1.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 220, 530, 95));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Y        M   D   H   M   S   TID Amount "
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 530, 95));

        jButton6.setText("Put Log Content to Database");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 150, -1, -1));

        jButton8.setText("Put Log Content to Database");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 510, -1, -1));

        jButtonViewEx3.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        jButtonViewEx3.setText("View Blank Log");
        jButtonViewEx3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViewEx3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonViewEx3, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 320, 180, -1));

        jButtonViewEx.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        jButtonViewEx.setText("View Exchange Rate Log");
        jButtonViewEx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViewExActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonViewEx, new org.netbeans.lib.awtextra.AbsoluteConstraints(356, 150, 180, -1));

        jButtonViewEx1.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        jButtonViewEx1.setText("View Void Log");
        jButtonViewEx1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViewEx1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonViewEx1, new org.netbeans.lib.awtextra.AbsoluteConstraints(899, 510, 180, -1));

        jButton10.setText("Put Log Content to Database");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton10, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 320, -1, -1));

        jButton2.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        jButton2.setText("View Refund Log");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(355, 320, 180, -1));

        jTable1ViewEx1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Y        M   D   H   M   S  Blanknum"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable1ViewEx1);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 410, 530, 95));

        jButton11.setText("Put All To DB");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton11, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 550, -1, -1));

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Y        M   D   H   M   S    Rate   Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTable4);

        jPanel1.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 410, 530, 95));

        jButton7.setText("Put Log Content to Database");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 510, -1, -1));

        jButton3.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        jButton3.setText("View Commission Log");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(355, 510, 180, -1));

        jTable1ViewEx2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Y        M   D   H   M   S  tID stfIID blID            cusIID exRID date amount amountPaid currency status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(jTable1ViewEx2);

        jPanel1.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 50, 530, 95));

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(41, 76, 113));
        jLabel11.setText("X");
        jLabel11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel11MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 0, 20, -1));

        jLabel1.setForeground(java.awt.Color.black);
        jLabel1.setText("View Logs");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 0, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 1090, -1));

        jPanel5.setBackground(new java.awt.Color(41, 76, 113));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(54, 97, 144));
        jPanel4.setForeground(new java.awt.Color(204, 204, 204));
        jPanel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel4MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel4MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel4MousePressed(evt);
            }
        });

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Home");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addComponent(jLabel10)
                .addContainerGap(88, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel5.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 210, 40));

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("System Admin");
        jPanel5.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 190, -1));

        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("Role:");
        jPanel5.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 31, -1));

        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("Name:");
        jPanel5.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setText("Staff ID:");
        jPanel5.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel5.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 190, 10));

        jPanel15.setBackground(new java.awt.Color(252, 68, 69));
        jPanel15.setForeground(new java.awt.Color(255, 255, 255));
        jPanel15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel15MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel15MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel15MouseExited(evt);
            }
        });

        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setText("Log Out");

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addContainerGap(85, Short.MAX_VALUE)
                .addComponent(jLabel24)
                .addGap(80, 80, 80))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        jPanel5.add(jPanel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 120, 210, -1));

        StaffNameLable.setForeground(java.awt.Color.white);
        StaffNameLable.setText("jLabel9");
        jPanel5.add(StaffNameLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, -1, -1));

        StaffIDLable.setForeground(java.awt.Color.white);
        StaffIDLable.setText("jLabel8");
        jPanel5.add(StaffIDLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 70, -1, -1));

        StaffRoleLable.setForeground(java.awt.Color.white);
        StaffRoleLable.setText("jLabel9");
        jPanel5.add(StaffRoleLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 90, -1, -1));

        getContentPane().add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 210, 580));

        jPanel14.setBackground(new java.awt.Color(238, 238, 238));
        jPanel14.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel14MouseDragged(evt);
            }
        });
        jPanel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel14MousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1300, Short.MAX_VALUE)
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1300, 20));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonViewExActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonViewExActionPerformed
        // TODO add your handling code here:
        model = (DefaultTableModel)jTable1ViewEx.getModel();
        model.setRowCount(0);
        BufferedReader br;
        try {
            br = new BufferedReader(new FileReader("C:/Users/ASUS/Desktop/ExchangeRateLog.txt"));
            
            String line = br.readLine();

            while (line != null) {
                model.insertRow(0,new Object[]{line} );
                line = br.readLine();
            }
            br.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(viewLogs.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(viewLogs.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_jButtonViewExActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        model = (DefaultTableModel)jTable2.getModel();
        model.setRowCount(0);
        BufferedReader br;
        try {
            br = new BufferedReader(new FileReader("C:/Users/ASUS/Desktop/logs/RefundLog.txt"));
            String line = br.readLine();

            while (line != null) {
                model.insertRow(0,new Object[]{line} );
                line = br.readLine();
            }
            br.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(viewLogs.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(viewLogs.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
        model = (DefaultTableModel)jTable4.getModel();
        model.setRowCount(0);
        BufferedReader br;
        try {
            br = new BufferedReader(new FileReader("C:/Users/ASUS/Desktop/commissionLog.txt"));
            String line = br.readLine();

            while (line != null) {
                model.insertRow(0,new Object[]{line} );
                line = br.readLine();
            }
            br.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(viewLogs.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(viewLogs.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
            // TODO add your handling code here:
        int startRow = findDate((DefaultTableModel)jTable2.getModel());
        //UPDATE `blanks` SET `status` = 'void' WHERE `blanks`.`blankID` = '20100000000'
        String ticketID ="";
        
        ArrayList<ArrayList<String>> exchangeRates = new ArrayList<ArrayList<String>>();
        String query = "";
 
        try{
            Connection con=MyConnection.getConnection();
            con.setAutoCommit(false);
            

        if(startRow != -1){           
           exchangeRates = getLogArrays(startRow);
           ArrayList<String> array;
           for(int i = 0; i < exchangeRates.size(); i++){
                array = exchangeRates.get(i);
                ticketID = array.get(1);
                
                query="UPDATE `ticketsales` SET `status` = 'refunded' WHERE `ticketsales`."
                + "`ticketID` = '" + ticketID + "'";
                ps=con.prepareStatement(query);
                ps.executeUpdate();
           }
           con.commit();
           con.close();
        }

        }catch (SQLException ex){
            Logger.getLogger(RecordPayment.class.getName()).log(Level.SEVERE,null,ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        
        int startRow = findDate((DefaultTableModel)jTable1ViewEx.getModel());

        String query="INSERT INTO `exchangerate`(`exchangeRateID`, `exchangeRate`, "
        + "`localCurrencyName`, `date`) VALUES (?,?,?,?)";
        String[] inputTypes = {"date","float","varchar","int"};
        Dictionary locMap = new Hashtable();
        locMap.put(0,4);
        locMap.put(1, 2);
        locMap.put(2, 3);
        locMap.put(3, 1);

        try {
            inputToDb(getLogArrays(startRow),query,inputTypes, locMap);

        } catch (ParseException ex) {
            Logger.getLogger(viewLogs.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        int startRow = findDate((DefaultTableModel)jTable4.getModel());

        String query="INSERT INTO `commisionrate`(`commissionRateID`, `commissionRate`, "
        + "`date`, `type`) VALUES (?,?,?,?)";
        String[] inputTypes = {"date","float","varchar","int"};
        Dictionary locMap = new Hashtable();
        locMap.put(0,3);
        locMap.put(1, 2);
        locMap.put(2, 4);
        locMap.put(3, 1);

        try {
            inputToDb(getLogArrays(startRow),query,inputTypes, locMap);

        } catch (ParseException ex) {
            Logger.getLogger(viewLogs.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButtonViewEx1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonViewEx1ActionPerformed
        // TODO add your handling code here:\
        
        model = (DefaultTableModel)jTable1ViewEx1.getModel();
        model.setRowCount(0);
        BufferedReader br;
        try {
            br = new BufferedReader(new FileReader("C:/Users/katoj/Desktop/logs/VoidLog.txt"));
            
            String line = br.readLine();

            while (line != null) {
                model.insertRow(0,new Object[]{line} );
                line = br.readLine();
            }
            br.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(viewLogs.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(viewLogs.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_jButtonViewEx1ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        int startRow = findDate((DefaultTableModel)jTable1ViewEx1.getModel());
        //UPDATE `blanks` SET `status` = 'void' WHERE `blanks`.`blankID` = '20100000000'
        String blankID ="";
        
        ArrayList<ArrayList<String>> exchangeRates = new ArrayList<ArrayList<String>>();
        String query = "";
 
        try{
            Connection con=MyConnection.getConnection();
            con.setAutoCommit(false);
            

        if(startRow != -1){           
           exchangeRates = getLogArrays(startRow);
           ArrayList<String> array;
           for(int i = 0; i < exchangeRates.size(); i++){
                array = exchangeRates.get(i);
                blankID = array.get(1);
                query="UPDATE `blanks` SET `status` = 'void' WHERE `blanks`."
                + "`blankID` = '" + blankID + "'";
                ps=con.prepareStatement(query);
                ps.executeUpdate();
           }
           con.commit();
           con.close();
        }

        }catch (SQLException ex){
            Logger.getLogger(RecordPayment.class.getName()).log(Level.SEVERE,null,ex);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButtonViewEx2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonViewEx2ActionPerformed
        // TODO add your handling code here:
        model = (DefaultTableModel)jTable1ViewEx2.getModel();
        model.setRowCount(0);
        BufferedReader br;
        try {
            br = new BufferedReader(new FileReader("C:/Users/katoj/Desktop/logs/ticketSalesLog.txt"));
            
            String line = br.readLine();

            while (line != null) {
                model.insertRow(0,new Object[]{line} );
                line = br.readLine();
            }
            br.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(viewLogs.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(viewLogs.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_jButtonViewEx2ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        int startRow = findDate((DefaultTableModel)jTable1ViewEx2.getModel());

        String query="INSERT INTO `ticketsales`(`ticketID`, `staffID`, `blankID`, "
                + "`customerID`, `exchangeRateID`, `dateSold`, `time`, `amount`, "
                + "`amountPaid`,`currency`,status) VALUES (?,?,?,?,?,?,?,?,?,?,?)";
        
        String[] inputTypes = {"date","int","int","string","int","int","string","string"
        ,"float","float","string","string"};
 
        
        Dictionary locMap = new Hashtable();
        locMap.put(0,6);
        locMap.put(1, 1);
        locMap.put(2, 2);
        locMap.put(3,3);
        locMap.put(4, 4);
        locMap.put(5, 5);
        locMap.put(6, 6);
        locMap.put(7, 7);
        locMap.put(8,8);
        locMap.put(9, 9);
        locMap.put(10, 10);
        locMap.put(11,11);
        try {
            inputToDb(getLogArrays(startRow),query,inputTypes, locMap);

        } catch (ParseException ex) {
            Logger.getLogger(viewLogs.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButtonViewEx3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonViewEx3ActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        
        model = (DefaultTableModel)jTable1ViewEx3.getModel();
        model.setRowCount(0);
        BufferedReader br;
        try {
            br = new BufferedReader(new FileReader("C:/Users/katoj/Desktop/logs/blankLog.txt"));
            
            String line = br.readLine();

            while (line != null) {
                model.insertRow(0,new Object[]{line} );
                line = br.readLine();
            }
            br.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(viewLogs.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(viewLogs.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_jButtonViewEx3ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
         int startRow = findDate((DefaultTableModel)jTable1ViewEx3.getModel());

         String query="INSERT INTO `blanks`(`blankID`, `staffID`, `type`, "
                    + "`status`, `blankNumber`, `commissionRateID`, `dateRecieved`, "
                 + "`dateAssigned`,Coupons,exchangeRateID,taxID) VALUES (?,?,?,?,?,?,?,?,?,?,?)";
        
        String[] inputTypes = {"date","string","int","int","string","int","int","string"
        ,"string","int","int","int"};
 
        
        Dictionary locMap = new Hashtable();
        locMap.put(0,7);
        locMap.put(1, 1);
        locMap.put(2, 2);
        locMap.put(3,3);
        locMap.put(4, 4);
        locMap.put(5, 5);
        locMap.put(6, 6);
        locMap.put(7, 7);
        locMap.put(8,8);
        locMap.put(9, 9);
        locMap.put(10, 10);
        locMap.put(11,11);
        try {
            inputToDb(getLogArrays(startRow),query,inputTypes, locMap);

        } catch (ParseException ex) {
            Logger.getLogger(viewLogs.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        //show all the tables 
        ///
jButtonViewEx.doClick();
jButton6.doClick();

jButton3.doClick();
jButton8.doClick();

jButtonViewEx2.doClick();
jButton9.doClick();

jButtonViewEx3.doClick();
jButton10.doClick();

jButton2.doClick();
jButton1.doClick();

jButtonViewEx1.doClick();
jButton7.doClick();

        

        
        
        
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jPanel14MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel14MouseDragged
        int cordX= evt.getXOnScreen();
        int cordY = evt.getYOnScreen();

        this.setLocation(cordX-mousepX, cordY-mousepY);
    }//GEN-LAST:event_jPanel14MouseDragged

    private void jPanel14MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel14MousePressed
        mousepX = evt.getX();
        mousepY = evt.getY();
    }//GEN-LAST:event_jPanel14MousePressed

    private void jLabel11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel11MouseClicked
        System.exit(0);
    }//GEN-LAST:event_jLabel11MouseClicked

    private void jPanel15MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel15MouseExited
        // TODO add your handling code here:
        jPanel15.setBackground(new Color(252,68,69));
    }//GEN-LAST:event_jPanel15MouseExited

    private void jPanel15MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel15MouseEntered
        // TODO add your handling code here:
        jPanel15.setBackground(new Color(252, 116, 117));
    }//GEN-LAST:event_jPanel15MouseEntered

    private void jPanel15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel15MouseClicked
        // TODO add your handling code here:
        loginFrame lf = new loginFrame();
        lf.setVisible(true);
        lf.pack();
        lf.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_jPanel15MouseClicked

    private void jPanel4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel4MousePressed

    private void jPanel4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseExited
        // TODO add your handling code here:
        jPanel4.setBackground(new Color(54,97,144));
    }//GEN-LAST:event_jPanel4MouseExited

    private void jPanel4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseEntered
        // TODO add your handling code here:
        jPanel4.setBackground(new Color(81, 135, 194));
    }//GEN-LAST:event_jPanel4MouseEntered

    private void jPanel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseClicked
        systemAdmin om = new systemAdmin(StaffIDLable.getText(),
        StaffNameLable.getText(),
        StaffRoleLable.getText());
        om.setVisible(true);
        om.pack();
        om.setLocationRelativeTo(null);
        
        this.dispose();
    }//GEN-LAST:event_jPanel4MouseClicked
    
    /** inputs the log content into the database
     * 
     * @param logContents
     * @param query
     * @param inputTypes
     * @param locMap
     * @throws ParseException 
     */
    private void inputToDb(ArrayList<ArrayList<String>> logContents, 
            String query, String[] inputTypes, Dictionary locMap) throws ParseException{
        

        ArrayList<ArrayList<String>> exchangeRates = new ArrayList<ArrayList<String>>();
       
        try{
            Connection con=MyConnection.getConnection();
            con.setAutoCommit(false);
            ps=con.prepareStatement(query);
                    
           ArrayList<String> array;
           String type;
           int indexForPS;
           for(int i = 0; i < logContents.size(); i++){
               array = logContents.get(i);
               for(int j = 0; j < inputTypes.length; j ++){
                   type = inputTypes[j].trim().toLowerCase();
                   indexForPS = (int)locMap.get(j);
                   switch(type){
                        case "float":
                           ps.setFloat(indexForPS,Float.parseFloat(array.get(j)));
                           break;
                        case "int":
                           ps.setInt(indexForPS, Integer.parseInt(array.get(j)));
                           break;
                        case "varchar":
                            ps.setString(indexForPS, array.get(j));
                            break;
                        case "string":
                            ps.setString(indexForPS, array.get(j));
                            break;
                        case "date":
                            ps.setDate(indexForPS, java.sql.Date.valueOf(array.get(j)));
                            break;
                   }
                   
               }
                ps.executeUpdate();

           }
           con.commit();
           con.close();
        
        }catch (SQLException ex){
            Logger.getLogger(RecordPayment.class.getName()).log(Level.SEVERE,null,ex);
        }
    }

    /** returns an arraylist that contains arraylists of the log contents starting from the dates .
     * 
     * @param currentRow is the current row in the array list.
     * @return 
     */
    private ArrayList<ArrayList<String>> getLogArrays(int currentRow){
        String rowString;
        String[] rowStrings;
        ArrayList<String> logContent;
        ArrayList<ArrayList<String>> logContents = new ArrayList<ArrayList<String>>();

        String date;
        while(currentRow > -1){
            rowString = model.getValueAt(currentRow, NORMAL).toString();
            rowStrings = rowString.split("\\s+");
            logContent = new ArrayList<>(Arrays.asList(rowStrings));
            date = ""; 
           
            for(int i = 0; i < 10; i++ ){
                date = date + logContent.get(0).charAt(i);
            }
            logContent.remove(0);
            logContent.add(0, date);
       
            logContents.add(logContent);
            
            currentRow--;
        }
       
        return logContents;
    }

    /** Find the current date 
     * 
     * @return returns the row index with the same date that was picked. Returns -1 if 
     */
    private int findDate(DefaultTableModel model){

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String[] selectedDate = dateFormat.format(dateField.getDate()).split("-");
        
        int i  = 0;
        String rowString;
        String[] rowStrings;
        String[] dateTime;
        String[] logDateTime;
        while(i < model.getRowCount()){
            rowString = model.getValueAt(i, NORMAL).toString();
            rowStrings = rowString.split("\\s+");   
           
            dateTime = rowStrings[0].split("-");
            logDateTime = new String[]{dateTime[0], dateTime[1], dateTime[2]};
            
            if(Arrays.equals(logDateTime, selectedDate)){
                return i;
            }
            i++;
        }
        System.out.print("The selected date does not exist in the log file");
        return -1;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(viewLogs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(viewLogs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(viewLogs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(viewLogs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new viewLogs().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel StaffIDLable;
    private javax.swing.JLabel StaffNameLable;
    private javax.swing.JLabel StaffRoleLable;
    private org.jdesktop.swingx.JXDatePicker dateField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButtonViewEx;
    private javax.swing.JButton jButtonViewEx1;
    private javax.swing.JButton jButtonViewEx2;
    private javax.swing.JButton jButtonViewEx3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1ViewEx;
    private javax.swing.JTable jTable1ViewEx1;
    private javax.swing.JTable jTable1ViewEx2;
    private javax.swing.JTable jTable1ViewEx3;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable4;
    // End of variables declaration//GEN-END:variables
}
