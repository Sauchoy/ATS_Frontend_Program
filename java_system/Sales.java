
package java_system;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.awt.Color;
/**
 * In Sales page, user is able to assign create customers, assign coupons to staff members and record tickets
 * to customer.
 * 
 */
public class Sales extends javax.swing.JFrame {
    
    int mousepX;
    int mousepY;

    /**
     * Establish JBDC connection and gets current time zone and date in a yyyy-MM-dd format.
     */
            Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    
     ZoneId z = ZoneId.of("Europe/London"); 
    LocalDate dayToday = LocalDate.now(z); 
    LocalTime timeToday = LocalTime.now(z); 
    String currentTime = timeToday.toString(); 
    String currentDate = dayToday.toString(); 
    SimpleDateFormat myformat = new SimpleDateFormat("yyyy-MM-dd");
    
    public Sales() {
        initComponents();
    }
    
    /** Creates Sales form. 
     * 
     * @param staffID sets staffID to StaffIDLabel to be displayed on Sales page.
     * @param firstName sets firstName to StaffNameLabel to be displayed on Sales page.
     * @param role   sets role to StaffRoleLabel to be displayed on Sales page.
     */
     public Sales(String staffID, String firstName,String role) {
        initComponents();
        StaffIDField.setText(staffID);
        StaffNameLable.setText(firstName);
        StaffRoleLable.setText(role);
        ViewCustomerButton.doClick();
        BlankTableButton.doClick();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        CreateCustomerNameField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        CreateCustomerSurnameField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        CreateCustomerAddressField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        CreateCustomerTelephoneField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        CreateCustomerEmailField = new javax.swing.JTextField();
        SaveCustomerButton = new javax.swing.JButton();
        CreateCustomerDOBField = new org.jdesktop.swingx.JXDatePicker();
        jLabel26 = new javax.swing.JLabel();
        CustomerIDTextField = new javax.swing.JTextField();
        UpdateButton = new javax.swing.JButton();
        RemoveButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        AmountField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        BlankIDField = new javax.swing.JTextField();
        RecordTicketButton = new javax.swing.JButton();
        CustomerIDField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        CurrencyComboBox = new javax.swing.JComboBox<>();
        LocalTaxField = new javax.swing.JTextField();
        OtherTaxField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        DepartureTimeField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        ArrivalTimeField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        DepartureFromField = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        ArrivalToField = new javax.swing.JTextField();
        AddButton = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        BlankIDField1 = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        TypeComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        CustomerTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        table2 = new javax.swing.JTable();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        ViewCustomerButton = new javax.swing.JButton();
        BlankTableButton = new javax.swing.JButton();
        BlanksType = new javax.swing.JComboBox<>();
        jLabel33 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel15 = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        StaffIDField = new javax.swing.JLabel();
        StaffNameLable = new javax.swing.JLabel();
        StaffRoleLable = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(238, 238, 238));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(62, 112, 165));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setForeground(java.awt.Color.white);
        jLabel2.setText("Create Customer");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 0, -1, -1));

        CreateCustomerNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateCustomerNameFieldActionPerformed(evt);
            }
        });
        jPanel2.add(CreateCustomerNameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 102, 159, -1));

        jLabel3.setForeground(java.awt.Color.white);
        jLabel3.setText("Name:");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 80, -1, -1));

        jLabel4.setForeground(java.awt.Color.white);
        jLabel4.setText("Surname:");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 132, -1, -1));

        CreateCustomerSurnameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateCustomerSurnameFieldActionPerformed(evt);
            }
        });
        jPanel2.add(CreateCustomerSurnameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 154, 159, -1));

        jLabel5.setForeground(java.awt.Color.white);
        jLabel5.setText("Address:");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 184, -1, -1));

        CreateCustomerAddressField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateCustomerAddressFieldActionPerformed(evt);
            }
        });
        jPanel2.add(CreateCustomerAddressField, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 206, 159, -1));

        jLabel6.setForeground(java.awt.Color.white);
        jLabel6.setText("Date Of Birth:");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 236, -1, -1));

        jLabel7.setForeground(java.awt.Color.white);
        jLabel7.setText("Telephone:");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 288, -1, -1));

        CreateCustomerTelephoneField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateCustomerTelephoneFieldActionPerformed(evt);
            }
        });
        jPanel2.add(CreateCustomerTelephoneField, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 310, 159, -1));

        jLabel8.setForeground(java.awt.Color.white);
        jLabel8.setText("Email:");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 340, -1, -1));

        CreateCustomerEmailField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateCustomerEmailFieldActionPerformed(evt);
            }
        });
        jPanel2.add(CreateCustomerEmailField, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 362, 159, -1));

        SaveCustomerButton.setText("Create");
        SaveCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveCustomerButtonActionPerformed(evt);
            }
        });
        jPanel2.add(SaveCustomerButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 390, 80, -1));

        CreateCustomerDOBField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateCustomerDOBFieldActionPerformed(evt);
            }
        });
        jPanel2.add(CreateCustomerDOBField, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 258, 159, -1));

        jLabel26.setForeground(java.awt.Color.white);
        jLabel26.setText("CustomerID:");
        jPanel2.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 28, -1, -1));

        CustomerIDTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustomerIDTextFieldActionPerformed(evt);
            }
        });
        jPanel2.add(CustomerIDTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 50, 159, -1));

        UpdateButton.setText("Update");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });
        jPanel2.add(UpdateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(87, 390, 80, -1));

        RemoveButton.setText("Remove");
        RemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveButtonActionPerformed(evt);
            }
        });
        jPanel2.add(RemoveButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, 157, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 180, 470));

        jPanel5.setBackground(new java.awt.Color(62, 112, 165));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        AmountField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AmountFieldActionPerformed(evt);
            }
        });
        jPanel5.add(AmountField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 260, -1));

        jLabel17.setForeground(java.awt.Color.white);
        jLabel17.setText("Amount:");
        jPanel5.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jLabel18.setForeground(java.awt.Color.white);
        jLabel18.setText("BlankID:");
        jPanel5.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        BlankIDField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlankIDFieldActionPerformed(evt);
            }
        });
        jPanel5.add(BlankIDField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 157, -1));

        RecordTicketButton.setText("Record ticket");
        RecordTicketButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RecordTicketButtonActionPerformed(evt);
            }
        });
        jPanel5.add(RecordTicketButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 330, -1));
        jPanel5.add(CustomerIDField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 157, -1));

        jLabel9.setForeground(java.awt.Color.white);
        jLabel9.setText("CustomerID");
        jPanel5.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        CurrencyComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "USD", "Local Currency" }));
        jPanel5.add(CurrencyComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 30, 71, -1));

        LocalTaxField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LocalTaxFieldActionPerformed(evt);
            }
        });
        jPanel5.add(LocalTaxField, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 80, 157, -1));

        OtherTaxField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OtherTaxFieldActionPerformed(evt);
            }
        });
        jPanel5.add(OtherTaxField, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 130, 157, -1));

        jLabel11.setForeground(java.awt.Color.white);
        jLabel11.setText("Local Tax");
        jPanel5.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 60, -1, -1));

        jLabel16.setForeground(java.awt.Color.white);
        jLabel16.setText("Other Tax");
        jPanel5.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 110, -1, -1));

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 500, 370, 200));

        jPanel6.setBackground(new java.awt.Color(62, 112, 165));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        DepartureTimeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DepartureTimeFieldActionPerformed(evt);
            }
        });
        jPanel6.add(DepartureTimeField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 145, -1));

        jLabel12.setForeground(java.awt.Color.white);
        jLabel12.setText("Departure Time:");
        jPanel6.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jLabel13.setForeground(java.awt.Color.white);
        jLabel13.setText("Arrival Time:");
        jPanel6.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        ArrivalTimeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArrivalTimeFieldActionPerformed(evt);
            }
        });
        jPanel6.add(ArrivalTimeField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 145, -1));

        jLabel14.setForeground(java.awt.Color.white);
        jLabel14.setText("Departure Form:");
        jPanel6.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        DepartureFromField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DepartureFromFieldActionPerformed(evt);
            }
        });
        jPanel6.add(DepartureFromField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 145, -1));

        jLabel15.setForeground(java.awt.Color.white);
        jLabel15.setText("Arrival To:");
        jPanel6.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, -1, -1));

        ArrivalToField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArrivalToFieldActionPerformed(evt);
            }
        });
        jPanel6.add(ArrivalToField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 145, -1));

        AddButton.setText("Add");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });
        jPanel6.add(AddButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, 160, -1));

        jLabel21.setForeground(java.awt.Color.white);
        jLabel21.setText("Assign Coupon");
        jPanel6.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(44, 0, -1, -1));

        jLabel19.setForeground(java.awt.Color.white);
        jLabel19.setText("Type:");
        jPanel6.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, -1, -1));

        BlankIDField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlankIDField1ActionPerformed(evt);
            }
        });
        jPanel6.add(BlankIDField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, 145, -1));

        jLabel22.setForeground(java.awt.Color.white);
        jLabel22.setText("BlankID:");
        jPanel6.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, -1, -1));

        TypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Flight", "Auditors" }));
        jPanel6.add(TypeComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 83, -1));

        jPanel1.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 20, 180, 470));

        CustomerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CustomerID", "Name", "Surname", "Address", "Telephone", "Email", "DOB", "Customer Type", "Outstanding Payments"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        CustomerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CustomerTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(CustomerTable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 40, 760, 250));

        table2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "staffID", "Type", "Blank ID ", "Status", "Assigned Coupons", "Date"
            }
        ));
        jScrollPane2.setViewportView(table2);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 370, 760, 290));

        jLabel23.setText("Blanks Table for Advisor");
        jPanel1.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 350, -1, -1));

        jLabel24.setText("Customer Table");
        jPanel1.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 20, -1, -1));

        ViewCustomerButton.setText("View Customer Table");
        ViewCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewCustomerButtonActionPerformed(evt);
            }
        });
        jPanel1.add(ViewCustomerButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 290, 760, -1));

        BlankTableButton.setText("View Blanks Table");
        BlankTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlankTableButtonActionPerformed(evt);
            }
        });
        jPanel1.add(BlankTableButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 670, 136, -1));

        BlanksType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "444", "440", "420", "201", "101" }));
        BlanksType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlanksTypeActionPerformed(evt);
            }
        });
        jPanel1.add(BlanksType, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 670, -1, -1));

        jLabel33.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(41, 76, 113));
        jLabel33.setText("X");
        jLabel33.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel33MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 0, 20, -1));

        jLabel1.setForeground(java.awt.Color.black);
        jLabel1.setText("Sale");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 0, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 1160, 710));

        jPanel7.setBackground(new java.awt.Color(41, 76, 113));
        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(54, 97, 144));
        jPanel4.setForeground(new java.awt.Color(204, 204, 204));
        jPanel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel4MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel4MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel4MousePressed(evt);
            }
        });

        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("Home");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addComponent(jLabel20)
                .addContainerGap(88, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel7.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 210, 40));

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(255, 255, 255));
        jLabel25.setText("Travel Advisor");
        jPanel7.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 190, -1));

        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel7.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 190, 10));

        jPanel15.setBackground(new java.awt.Color(252, 68, 69));
        jPanel15.setForeground(new java.awt.Color(255, 255, 255));
        jPanel15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel15MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel15MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel15MouseExited(evt);
            }
        });

        jLabel32.setForeground(new java.awt.Color(255, 255, 255));
        jLabel32.setText("Log Out");

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addContainerGap(85, Short.MAX_VALUE)
                .addComponent(jLabel32)
                .addGap(80, 80, 80))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel32, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        jPanel7.add(jPanel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 120, 210, -1));

        jLabel29.setForeground(java.awt.Color.white);
        jLabel29.setText("Name:");
        jPanel7.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        jLabel30.setForeground(java.awt.Color.white);
        jLabel30.setText("Staff ID:");
        jPanel7.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        jLabel31.setForeground(java.awt.Color.white);
        jLabel31.setText("Role:");
        jPanel7.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 31, -1));

        StaffIDField.setForeground(java.awt.Color.white);
        StaffIDField.setText("jLabel8");
        jPanel7.add(StaffIDField, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 70, -1, -1));

        StaffNameLable.setForeground(java.awt.Color.white);
        StaffNameLable.setText("jLabel9");
        jPanel7.add(StaffNameLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, -1, -1));

        StaffRoleLable.setForeground(java.awt.Color.white);
        StaffRoleLable.setText("jLabel9");
        jPanel7.add(StaffRoleLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 90, -1, -1));

        getContentPane().add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 210, 710));

        jPanel14.setBackground(new java.awt.Color(238, 238, 238));
        jPanel14.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel14MouseDragged(evt);
            }
        });
        jPanel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel14MousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1370, Short.MAX_VALUE)
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1370, 20));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void CreateCustomerNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateCustomerNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CreateCustomerNameFieldActionPerformed

    private void CreateCustomerSurnameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateCustomerSurnameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CreateCustomerSurnameFieldActionPerformed

    private void CreateCustomerAddressFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateCustomerAddressFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CreateCustomerAddressFieldActionPerformed

    private void CreateCustomerTelephoneFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateCustomerTelephoneFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CreateCustomerTelephoneFieldActionPerformed

    private void CreateCustomerEmailFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateCustomerEmailFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CreateCustomerEmailFieldActionPerformed

    private void DepartureTimeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DepartureTimeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DepartureTimeFieldActionPerformed

    private void ArrivalTimeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArrivalTimeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ArrivalTimeFieldActionPerformed

    private void DepartureFromFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DepartureFromFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DepartureFromFieldActionPerformed

    private void ArrivalToFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArrivalToFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ArrivalToFieldActionPerformed

    private void AmountFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AmountFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AmountFieldActionPerformed

    private void BlankIDFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlankIDFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BlankIDFieldActionPerformed

    private void SaveCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveCustomerButtonActionPerformed

         //get the fields from the design into variables
        int customerID = Integer.parseInt(CustomerIDTextField.getText());
        String fname=CreateCustomerNameField.getText();
        String lname=CreateCustomerSurnameField.getText();
        String address=CreateCustomerAddressField.getText();
        //String date=CreateCustomerSurnameField.getText();
        String telephone=CreateCustomerTelephoneField.getText(); 
        String email=CreateCustomerEmailField.getText();
        

        SimpleDateFormat dateformat= new SimpleDateFormat("yyyy-MM-dd");
        String  bdate= dateformat.format(CreateCustomerDOBField.getDate());
        Connection con =null;
       //seting database link and which action to do
       PreparedStatement ps;
       String query="INSERT INTO `customer`(`customerID`, `firstName` ,`lastName`, `DOB`, `telephone`, `email`, `address`,`type`,`discountRateID`,`outstandingTicket`) VALUES (?,?,?,?,?,?,?,?,?,?)";
     try{
            con=MyConnection.getConnection();
            System.out.println("Get Connection");
            con.setAutoCommit(false);
         ps=con.prepareStatement(query);
         
         ps.setInt(1,customerID);
         ps.setString(2,fname);
         ps.setString(3,lname);
         ps.setString(4,bdate);
         ps.setString(6,email);
         ps.setString(5,telephone);
         ps.setString(7,address);
         ps.setString(8,"Casual");
         ps.setFloat(9,-1);
         ps.setFloat(10,0);
         
         if(ps.executeUpdate()>0){
             JOptionPane.showMessageDialog(null,"New Customer is made");
             con.setAutoCommit(true);
             con.close();
             System.out.println("Close Connection");
         }
         
     }catch (SQLException ex){
         Logger.getLogger(RecordPayment.class.getName()).log(Level.SEVERE,null,ex);
         
     }
        
        
    }//GEN-LAST:event_SaveCustomerButtonActionPerformed

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed

        
        String dt=DepartureTimeField.getText();
        String at=ArrivalTimeField.getText();
        String dff=DepartureFromField.getText();
        String art=ArrivalToField.getText();
        String type=String.valueOf(TypeComboBox.getSelectedItem());
        String blank=BlankIDField1.getText();
       //seting database link and which action to do
       PreparedStatement ps;
       String query="INSERT INTO `coupon`(`couponID`, `blankID`, `type`, `departureTime`, `arrivalTime`, `departuredFrom`, `arrivedTo`) VALUES  (?,?,?,?,?,?,?)";
       Connection con=null;
     try{
            con=MyConnection.getConnection();
            con.setAutoCommit(false);
         ps=con.prepareStatement(query);
         ps.setInt(1,(int) (Math.random() * ( 9999 - 1000 )));
         ps.setString(2,blank);
         ps.setString(4,dt);
         ps.setString(5,at);
         ps.setString(6,dff);
         ps.setString(7,art);
         ps.setString(3,type);
         
         updateCouponCount(blank);
         
         if(ps.executeUpdate()>0){
             JOptionPane.showMessageDialog(null,"New Coupon Added");
             con.setAutoCommit(true);
             con.close();
             
         }
         
     }catch (SQLException ex){
         Logger.getLogger(RecordPayment.class.getName()).log(Level.SEVERE,null,ex);
         
     }

        
    }//GEN-LAST:event_AddButtonActionPerformed

    public void updateCouponCount(String blank){
         Connection con=null;
        try{
         con=MyConnection.getConnection();
         con.setAutoCommit(false);
         PreparedStatement ps;
         String query="UPDATE `blanks` SET Coupons=Coupons+1 WHERE blankID="+blank;
         ps=con.prepareStatement(query);
         ps.execute();
         con.setAutoCommit(true);
         con.close();
         System.out.println("Close Connection");
        
    
    
}catch(Exception e){
        JOptionPane.showMessageDialog(this,e);
    }
    }
    
    
    private void BlankIDField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlankIDField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BlankIDField1ActionPerformed

    private void CreateCustomerDOBFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateCustomerDOBFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CreateCustomerDOBFieldActionPerformed

    private void CustomerIDTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CustomerIDTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CustomerIDTextFieldActionPerformed

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        // TODO add your handling code here:
        try{
            
            int customerID = Integer.parseInt(CustomerIDTextField.getText());
            String firstName = CreateCustomerNameField.getText();
            String lastName = CreateCustomerSurnameField.getText();
            String address = CreateCustomerAddressField.getText();
            String telephone = CreateCustomerTelephoneField.getText();
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String bdate = dateFormat.format(CreateCustomerDOBField.getDate());
            String email = CreateCustomerEmailField.getText();
            con.setAutoCommit(false);
            String query = "update customer set customerID = '"+customerID+"', firstName = '"+firstName+"', lastName = '"+lastName+"', address = '"+address+"', DOB = '"+bdate+"', telephone = '"+telephone+"', email = '"+email+"' where customerID ='"+customerID+"' ";
            pst = con.prepareStatement(query);
            pst.execute();
            con.setAutoCommit(true);
            

            
            JOptionPane.showMessageDialog(null, "Updated");
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void ViewCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewCustomerButtonActionPerformed
        // TODO add your handling code here:
        try {
        String query = "SELECT customerID, firstName, lastName, telephone, DOB,email,address,type,outstandingTicket FROM customer";
        con = DriverManager.getConnection("jdbc:mysql://localhost/java_system_db", "root", "");
        pst = con.prepareStatement(query);
        rs = pst.executeQuery();
        DefaultTableModel tm = (DefaultTableModel) CustomerTable.getModel();
        tm.setRowCount(0);
        
        while(rs.next())
        {
            int customerID = rs.getInt("customerID");
            String firstName = rs.getString("firstName");
            String lastName = rs.getString("lastName");
            String address = rs.getString("address");
            String email = rs.getString("email");
            String telephone = rs.getString("telephone");
            String bdate = rs.getString("DOB");
            String status= rs.getString("type");
            Integer tickets=rs.getInt("outstandingTicket");
            tm.addRow(new Object[] { customerID, firstName,lastName,address,telephone,email,bdate,status,tickets});
        }
        
        } catch(Exception e) {
             JOptionPane.showMessageDialog(this,e);
        }
                
    }//GEN-LAST:event_ViewCustomerButtonActionPerformed

    private void CustomerTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CustomerTableMouseClicked
        // TODO add your handling code here:
         int row = CustomerTable.getSelectedRow();
        String tc = CustomerTable.getModel().getValueAt(row,0).toString();
        try{
            String query = "SELECT * from customer where customerID = " + tc +"";
            pst = con.prepareStatement(query);
            rs = pst.executeQuery();
            DefaultTableModel tm = (DefaultTableModel)CustomerTable.getModel();
            if (rs.next()){
                int customerID = rs.getInt("customerID");
                String firstName = rs.getString("firstName");
                String lastName = rs.getString("lastName");
                String address = rs.getString("address");
                String email = rs.getString("email");
                String telephone = rs.getString("telephone");
                

                String bdate = rs.getString("DOB");
                java.util.Date date = new SimpleDateFormat("yyyy-MM-dd").parse(bdate);
                
                CustomerIDTextField.setText(String.valueOf(customerID));
                CreateCustomerNameField.setText(firstName);
                CreateCustomerSurnameField.setText(lastName);
                CreateCustomerAddressField.setText(address);
                CreateCustomerTelephoneField.setText(telephone);
                CreateCustomerEmailField.setText(email);
                CreateCustomerDOBField.setDate(date);
                
            }
        }catch(Exception e) {
             JOptionPane.showMessageDialog(this,e);
        }
    }//GEN-LAST:event_CustomerTableMouseClicked

    private void RemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveButtonActionPerformed
        // TODO add your handling code here:
        int row = CustomerTable.getSelectedRow();
        String cell = CustomerTable.getModel().getValueAt(row,0).toString();
        String query = "DELETE FROM customer where customerID = " + cell;
        try{
            pst = con.prepareStatement(query);
            con.setAutoCommit(false);
            pst.execute();
            JOptionPane.showMessageDialog(null, "Deleted Successful");
            con.setAutoCommit(true);
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
    }//GEN-LAST:event_RemoveButtonActionPerformed

    private void RecordTicketButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RecordTicketButtonActionPerformed
        // TODO add your handling code here:
        int staffID=Integer.parseInt(StaffIDField.getText());
        String blankID=BlankIDField.getText();
        int customerID=Integer.parseInt(CustomerIDField.getText());
        float amount=Integer.parseInt(AmountField.getText());
        String currency=String.valueOf(CurrencyComboBox.getSelectedItem());
        
        
        PreparedStatement ps;
        Connection con=null;
        String query="INSERT INTO `ticketsales`(`ticketID`, `staffID`, `blankID`, `customerID`, `exchangeRateID`, `dateSold`, `time`, `amount`, `amountPaid`,`currency`,status) VALUES (?,?,?,?,?,?,?,?,?,?,?)";
        try{  
         con=MyConnection.getConnection();
         con.setAutoCommit(false);
         System.out.println("Get Connection");
         ps=con.prepareStatement(query);
         
         
         ps.setInt(1,(int) (Math.random() * ( 9999 - 1000 )));
         ps.setInt(2,staffID);
         ps.setString(3,blankID);
         ps.setInt(4,customerID);
         ps.setInt(5,getExchangeRate());
         ps.setString(6,currentDate);
         ps.setString(7,currentTime);
         ps.setFloat(8,getAmount(blankID,applyDiscount(customerID,amount)));
         ps.setFloat(9,0);
         ps.setString(10,currency);
         ps.setString(11,"sold");
         
         latePaymentOption(customerID);
         updateCustomerOustandingTickets(customerID);
         
         if(ps.executeUpdate()>0){
             JOptionPane.showMessageDialog(null,"Ticket Sold");
         }
         con.setAutoCommit(true);
         con.close();
         setCommID();
         System.out.println("Close Connection"); 
          blankToSold(blankID);
        } 
        
    catch(Exception e){
        JOptionPane.showMessageDialog(this,e);
    }
        
    }//GEN-LAST:event_RecordTicketButtonActionPerformed

    /** This applies discounts to customer by their customer type.
     * 
     * @param customerID gets customerID for sql query to apply discount for the right customer.
     * @param amount  this is the amount that the customer gets for their discount on the ticket.
     * @return amount is returned for creating the customers new ticket price.
     */
     public float applyDiscount(int customerID, float amount){

        String customerType = null;
        String flexDiscString = ""; 
        String[] splitted = {}; 
        int discountRateID = 0;
        int outstandingTicket = 0;
        float fixedDisc = 0; 
        
        try{
            
            String query = "SELECT * FROM `customer` WHERE `customer`.`customerID` = "
                    + customerID;
            con = DriverManager.getConnection("jdbc:mysql://localhost/java_system_db", "root", "");
            pst = con.prepareStatement(query);
            rs = pst.executeQuery();

            while(rs.next())
            {
                customerType = rs.getString("type");
                discountRateID = rs.getInt("discountRateID");
                outstandingTicket = rs.getInt("outstandingTicket");
            }
    
            if(!customerType.equals("Valued")){
                JOptionPane.showMessageDialog(null,"The customer is not a valued customer. No discount applied.");
                return amount;
            }else if(outstandingTicket!=0){
                JOptionPane.showMessageDialog(null,"The customer has" + outstandingTicket
                        + " tickets. No discount applied.");
                return amount;
            }
            else{
               
                query = "SELECT * FROM `discountrates` WHERE `discountRateID` = " 
                    + discountRateID;
                pst = con.prepareStatement(query);
                rs = pst.executeQuery();
                
                while(rs.next()){
                    flexDiscString = rs.getString("flexibleDiscount");  
                    fixedDisc = rs.getFloat("fixedDiscount");
                }
               
                if(flexDiscString == null && fixedDisc == 0.0){
                    JOptionPane.showMessageDialog(null,"This valued customer does"
                            + "not have a discount plan.");
                    return amount;
                }else if(flexDiscString != null){
                    splitted = flexDiscString.split("\\s+");

                    String r[] = new String[3];
                    int i = 0;                   
                    while(i< splitted.length){

                        r[0] = splitted[i];
                        r[1] = splitted[i + 1];
                        r[2] = splitted[i + 2];
                        if(r[1].equals("<")){
                            return amount * Float.parseFloat(r[2]);
                        }
                        else if(Float.parseFloat(r[0])< amount && amount < Float.parseFloat(r[2])){
                        
                            return amount * (1 - Float.parseFloat(r[2]));                      
                        }

                        i += 3;
                    }    
                }else{
                    return amount * (1 - fixedDisc);
                }
            }
            
        }catch(Exception e){
                e.printStackTrace();
                JOptionPane.showMessageDialog(null,e);
        }
        return 0;
        
    }
    /**  This sets the commissionRateID which is then updated in the blanks table.
     * 
     */
    public void setCommID(){
    String blankID=BlankIDField.getText();
    String query = "SELECT * FROM `blanks` WHERE `blankID` = " + blankID;
    int blankType = 0;
    int commissionRateID = 0;
    
    try{  
        con=MyConnection.getConnection();
        pst=con.prepareStatement(query);
        rs = pst.executeQuery();
        if (rs.next()){
            blankType = rs.getInt("type");
        }
        query = "select * from commisionrate where type = "+blankType+" order by "
                + "commisionrate.date DESC LIMIT 1";
        con=MyConnection.getConnection();
        pst=con.prepareStatement(query);
        rs = pst.executeQuery();
        if(rs.next()){
            commissionRateID = rs.getInt("commissionRateID");
        }
        query = "UPDATE blanks SET commissionRateID ="+commissionRateID+" WHERE "
                + "blankID="+blankID+";";
        con= MyConnection.getConnection();
        pst=con.prepareStatement(query);
        pst.executeUpdate();
        

    }catch(Exception e){
        JOptionPane.showMessageDialog(this,e);
    }


}
    /** This selects the exchangeRateID which is then set to the variable rate
     * 
     * @return SQL query is used to get the exchangeRateID and then returning it as 'rate'.
     */
    public int getExchangeRate(){
       String query = "SELECT exchangeRateID,MAX(date) FROM exchangerate ";
       Integer rate=-1;
       Connection con=null;
       PreparedStatement ps;
     try{  
         con=MyConnection.getConnection();
         con.setAutoCommit(false);
         System.out.println("Get Connection");
         ps=con.prepareStatement(query);
         ResultSet rs=ps.executeQuery();
            if (rs.next()){
                rate = rs.getInt("exchangeRateID");
            con.setAutoCommit(true);
            con.close();
            System.out.println("Close Connection");
            return rate;
            }
    }catch(Exception e){
        JOptionPane.showMessageDialog(this,e);
    } return rate;
    }
    
     
    /** This gives the option for only certain customer type to 'pay later' option and displaying message for user to notice. 
     * 
     * @param customerID gets customerID to find customer type. 
     */
public void latePaymentOption(Integer customerID){
    String ctype="";
    Integer outT=0;
            String query = "SELECT type,outstandingTicket from customer where customerID = " + customerID +"";
       Connection con=null;
       PreparedStatement ps;
       
     try{  
         con=MyConnection.getConnection();
         System.out.println("Get Connection");
         ps=con.prepareStatement(query);
         ResultSet rs=ps.executeQuery();
            if (rs.next()){
                ctype = rs.getString("type");
                outT=rs.getInt("outstandingTicket");
            }
            con.close();
            System.out.println("Close Connection");
            if(ctype.equals("Casual")){
                JOptionPane.showMessageDialog(this,"Casual Customer cant pay Later");
                RecordPayment rp = new RecordPayment(StaffIDField.getText(),
                StaffNameLable.getText(),
                StaffRoleLable.getText());

        rp.setVisible(true);
        rp.pack();
        rp.setLocationRelativeTo(null);
        this.dispose();        //
            }else if(ctype.equals("Valued") && outT>0){
            JOptionPane.showMessageDialog(this,"Valued Customer with outstanding payment cant pay Later");
                RecordPayment rp = new RecordPayment(StaffIDField.getText(),
                StaffNameLable.getText(),
                StaffRoleLable.getText());

        rp.setVisible(true);
        rp.pack();
        rp.setLocationRelativeTo(null);
        this.dispose();    
            }else{
                JOptionPane.showMessageDialog(this,"This customer can pay latter");
            }
    
    }catch(Exception e){
        JOptionPane.showMessageDialog(this,e);
    }
}

/** This updates the number of outstanding tickets that a customers has. 
 * 
 * @param customerID gets customerID to find how many outstanding tickets they may have.
 */
public void updateCustomerOustandingTickets(Integer customerID){
    
    try{  
    String query = "update customer set outstandingTicket=outstandingTicket+1 where customerID ='"+customerID+"' ";
            pst = con.prepareStatement(query);
            pst.execute();

            JOptionPane.showMessageDialog(null, "Updated");
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
}







/** This gets the amount and adding all taxes to it to create a final amount. 
 * 
 * @param blankID gets blankID to find the amount. 
 * @param amount gets the first initial price before taxes.
 * @return returns the ticket price with the taxes applied and assigning taxes to the blanks.
 */
    public float getAmount(String blankID,Float amount){
        int taxID=(int) (Math.random() * ( 9999 - 1000 ));
        
        PreparedStatement ps;
        Connection con=null;
        String query="INSERT INTO `taxes`(taxID,local,others) VALUES (?,?,?);";
        try{  
         con=MyConnection.getConnection();
         con.setAutoCommit(false);
         System.out.println("Get Connection");
         ps=con.prepareStatement(query);
         
        ps.setInt(1,taxID);
        ps.setFloat(2,amount*Float.parseFloat(LocalTaxField.getText()));
        ps.setFloat(3,amount*Float.parseFloat(OtherTaxField.getText()));
        ps.execute();
        con.setAutoCommit(true);
        con.close();
        
       setBlankToTax(taxID,blankID);
        
        return amount+(amount*Float.parseFloat(LocalTaxField.getText()))+(amount*Float.parseFloat(OtherTaxField.getText()));
        
    }catch(Exception e){
        JOptionPane.showMessageDialog(this,e);
    }finally{
         
        
    }
        return -1;
    }
    
    /** sets taxID, exchangeRateID and blankID in blank table
     * 
     * @param taxID It's updated in the blank table
     * @param blankID  It's updated in the blank table
     */
    public void setBlankToTax(Integer taxID, String blankID){
         Connection con=null;
  
         try{
           con=MyConnection.getConnection();
           con.setAutoCommit(false);
           System.out.println("Get Connection");
           PreparedStatement ps;
                String query="UPDATE blanks SET taxID="+taxID+",exchangeRateID="+getExchangeRate()+" WHERE blankID="+blankID+";";

                ps=con.prepareStatement(query);
           
            ps.execute();
           
                  con.setAutoCommit(true);
           con.close();
            System.out.println("Close Connection");
    }catch(Exception e){
            JOptionPane.showMessageDialog(this,"No Blank ID was entered");
        }
    }
    
    /** When ticket is sold, it's then updated in blank table to 'sold'
     * 
     * @param BlankID gets BlankID to set status to 'sold'
     */
    public void blankToSold(String BlankID){
         Connection con=null;
  
         try{
           con=MyConnection.getConnection();
           con.setAutoCommit(false);
           System.out.println("Get Connection");
           PreparedStatement ps;
                String query="UPDATE blanks SET status='sold' WHERE blankID="+BlankID+";";

                ps=con.prepareStatement(query);

            ps.execute();
           
                  con.setAutoCommit(true);
           con.close();
            System.out.println("Close Connection");
    }catch(Exception e){
            JOptionPane.showMessageDialog(this,"No Blank ID was entered");
        }
        
    }
    
    
    private void BlankTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlankTableButtonActionPerformed
        // TODO add your handling code here:
       String staffID = StaffIDField.getText();
       String btype=(String) BlanksType.getSelectedItem();
       Connection con=null;
       PreparedStatement ps;
       String query;
       if(btype=="All"){
        query="SELECT `blankID`, `staffID`, `type`, `status`, `dateRecieved`, `Coupons` FROM `blanks` WHERE staffID="+staffID+" AND type";
       }else{
         query="SELECT `blankID`, `staffID`, `type`, `status`, `dateRecieved`, `Coupons` FROM `blanks` WHERE staffID="+staffID+" AND type="+btype;
       }
     try{  
         con=MyConnection.getConnection();
         con.setAutoCommit(false);
         System.out.println("Get Connection");
         ps=con.prepareStatement(query);
         ResultSet rs=ps.executeQuery();
         DefaultTableModel tm=(DefaultTableModel)table2.getModel();
         tm.setRowCount(0); 
         while(rs.next()){
             Object o[]={rs.getString("staffID"),rs.getString("type"),rs.getString("blankID"),rs.getString("status"),rs.getString("Coupons"),rs.getString("dateRecieved")};
             tm.addRow(o);
         }  
         con.setAutoCommit(true);
         con.close();
         
         System.out.println("Close Connection");
         
    }                                           
    catch(Exception e){
        JOptionPane.showMessageDialog(this,"No Staff ID was entered");
    }
        
        
    }//GEN-LAST:event_BlankTableButtonActionPerformed

    private void BlanksTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlanksTypeActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_BlanksTypeActionPerformed

    private void LocalTaxFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LocalTaxFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LocalTaxFieldActionPerformed

    private void OtherTaxFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OtherTaxFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OtherTaxFieldActionPerformed

    private void jPanel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseClicked
        travelAd ta =new travelAd(StaffIDField.getText(),
            StaffNameLable.getText(),
            StaffRoleLable.getText());
        ta.setVisible(true);
        ta.pack();
        ta.setLocationRelativeTo(null); //puts in the center of the screen
        //  sls.setDefultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose(); //hides previos page
    }//GEN-LAST:event_jPanel4MouseClicked

    private void jPanel4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseEntered
        // TODO add your handling code here:
        jPanel4.setBackground(new Color(81, 135, 194));
    }//GEN-LAST:event_jPanel4MouseEntered

    private void jPanel4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseExited
        // TODO add your handling code here:
        jPanel4.setBackground(new Color(54,97,144));
    }//GEN-LAST:event_jPanel4MouseExited

    private void jPanel4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel4MousePressed

    private void jPanel15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel15MouseClicked
        // TODO add your handling code here:
        loginFrame lf = new loginFrame();
        lf.setVisible(true);
        lf.pack();
        lf.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_jPanel15MouseClicked

    private void jPanel15MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel15MouseEntered
        // TODO add your handling code here:
        jPanel15.setBackground(new Color(252, 116, 117));
    }//GEN-LAST:event_jPanel15MouseEntered

    private void jPanel15MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel15MouseExited
        // TODO add your handling code here:
        jPanel15.setBackground(new Color(252,68,69));
    }//GEN-LAST:event_jPanel15MouseExited

    private void jPanel14MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel14MouseDragged
        int cordX= evt.getXOnScreen();
        int cordY = evt.getYOnScreen();

        this.setLocation(cordX-mousepX, cordY-mousepY);
    }//GEN-LAST:event_jPanel14MouseDragged

    private void jPanel14MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel14MousePressed
        mousepX = evt.getX();
        mousepY = evt.getY();
    }//GEN-LAST:event_jPanel14MousePressed

    private void jLabel33MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel33MouseClicked
        System.exit(0);
    }//GEN-LAST:event_jLabel33MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Sales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Sales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Sales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Sales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Sales().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JTextField AmountField;
    private javax.swing.JTextField ArrivalTimeField;
    private javax.swing.JTextField ArrivalToField;
    private javax.swing.JTextField BlankIDField;
    private javax.swing.JTextField BlankIDField1;
    private javax.swing.JButton BlankTableButton;
    private javax.swing.JComboBox<String> BlanksType;
    private javax.swing.JTextField CreateCustomerAddressField;
    private org.jdesktop.swingx.JXDatePicker CreateCustomerDOBField;
    private javax.swing.JTextField CreateCustomerEmailField;
    private javax.swing.JTextField CreateCustomerNameField;
    private javax.swing.JTextField CreateCustomerSurnameField;
    private javax.swing.JTextField CreateCustomerTelephoneField;
    private javax.swing.JComboBox<String> CurrencyComboBox;
    private javax.swing.JTextField CustomerIDField;
    private javax.swing.JTextField CustomerIDTextField;
    private javax.swing.JTable CustomerTable;
    private javax.swing.JTextField DepartureFromField;
    private javax.swing.JTextField DepartureTimeField;
    private javax.swing.JTextField LocalTaxField;
    private javax.swing.JTextField OtherTaxField;
    private javax.swing.JButton RecordTicketButton;
    private javax.swing.JButton RemoveButton;
    private javax.swing.JButton SaveCustomerButton;
    private javax.swing.JLabel StaffIDField;
    private javax.swing.JLabel StaffNameLable;
    private javax.swing.JLabel StaffRoleLable;
    private javax.swing.JComboBox<String> TypeComboBox;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JButton ViewCustomerButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable table2;
    // End of variables declaration//GEN-END:variables
}
