
package java_system;

import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import static com.itextpdf.text.Font.FontFamily.TIMES_ROMAN;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.io.FileOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
/**
 *
 * Stock turnover report page for System Admin 
 */
public class StockTurnoverReport extends javax.swing.JFrame {
    
    int mousepX;
    int mousepY;

    /**
     * Creates new form StockTurnoverReport 
     */
    public StockTurnoverReport() {
        initComponents();
    }
  public StockTurnoverReport(String staffID,String firstName, String role) {
        initComponents();
        StaffIDLable.setText(staffID);
        StaffNameLable.setText(firstName);
        StaffRoleLable.setText(role);
        StockReportButton.doClick();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel15 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        StaffNameLable = new javax.swing.JLabel();
        StaffIDLable = new javax.swing.JLabel();
        StaffRoleLable = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        StockReportButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        StockPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        AssignedTable = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        UnusedTable = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        UsedTable = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        StockTotalTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        RecievedTable = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        SubAgentTable = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        ToDate = new org.jdesktop.swingx.JXDatePicker();
        FromDate = new org.jdesktop.swingx.JXDatePicker();
        StockReport = new javax.swing.JButton();
        StockReportButton1 = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel5.setBackground(new java.awt.Color(41, 76, 113));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(54, 97, 144));
        jPanel3.setForeground(new java.awt.Color(204, 204, 204));
        jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel3MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel3MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel3MousePressed(evt);
            }
        });

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Home");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addComponent(jLabel10)
                .addContainerGap(94, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel5.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 210, 40));

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("System Admin");
        jPanel5.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 190, -1));

        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Role:");
        jPanel5.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 31, -1));

        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Name:");
        jPanel5.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("Staff ID:");
        jPanel5.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel5.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 190, 10));

        jPanel15.setBackground(new java.awt.Color(252, 68, 69));
        jPanel15.setForeground(new java.awt.Color(255, 255, 255));
        jPanel15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel15MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel15MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel15MouseExited(evt);
            }
        });

        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setText("Log Out");

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addContainerGap(85, Short.MAX_VALUE)
                .addComponent(jLabel24)
                .addGap(80, 80, 80))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        jPanel5.add(jPanel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 120, 210, -1));

        StaffNameLable.setForeground(java.awt.Color.white);
        StaffNameLable.setText("jLabel9");
        jPanel5.add(StaffNameLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, -1, -1));

        StaffIDLable.setForeground(java.awt.Color.white);
        StaffIDLable.setText("jLabel8");
        jPanel5.add(StaffIDLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 70, -1, -1));

        StaffRoleLable.setForeground(java.awt.Color.white);
        StaffRoleLable.setText("jLabel9");
        jPanel5.add(StaffRoleLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 90, -1, -1));

        getContentPane().add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 210, 510));

        jPanel1.setBackground(new java.awt.Color(238, 238, 238));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText("Report:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jButton2.setText("Print");
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1510, 530, -1, -1));

        StockReportButton.setText("View Stock Reports");
        StockReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StockReportButtonActionPerformed(evt);
            }
        });
        jPanel1.add(StockReportButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1310, 530, 181, -1));

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(41, 76, 113));
        jLabel9.setText("X");
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 0, 20, -1));

        jLabel1.setText("Stock Turnover Reports");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 0, -1, -1));

        StockPanel.setBackground(new java.awt.Color(238, 238, 238));

        AssignedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Staff ID", "From", "To", "AMNT"
            }
        ));
        jScrollPane3.setViewportView(AssignedTable);

        UnusedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Staff ID", "From", "To", "AMNT"
            }
        ));
        jScrollPane6.setViewportView(UnusedTable);

        UsedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Staff ID", "From", "To", "AMNT"
            }
        ));
        jScrollPane7.setViewportView(UsedTable);

        StockTotalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Assigned AMNT", "Paid AMNT", "Used AMNT"
            }
        ));
        jScrollPane8.setViewportView(StockTotalTable);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Unused");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Assigned");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Used");

        RecievedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Staff ID", "From", "To", "AMNT"
            }
        ));
        jScrollPane10.setViewportView(RecievedTable);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Recieved");

        SubAgentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Staff ID", "From", "To", "AMNT"
            }
        ));
        jScrollPane11.setViewportView(SubAgentTable);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Sub Agents Amount");

        StockReport.setText("Print Report");
        StockReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StockReportActionPerformed(evt);
            }
        });

        StockReportButton1.setText("View Stock Reports");
        StockReportButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StockReportButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout StockPanelLayout = new javax.swing.GroupLayout(StockPanel);
        StockPanel.setLayout(StockPanelLayout);
        StockPanelLayout.setHorizontalGroup(
            StockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StockPanelLayout.createSequentialGroup()
                .addGroup(StockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(StockPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(StockPanelLayout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(jLabel6))
                    .addGroup(StockPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(StockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(StockPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(StockPanelLayout.createSequentialGroup()
                        .addGroup(StockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(StockPanelLayout.createSequentialGroup()
                                .addGap(157, 157, 157)
                                .addComponent(jLabel8)))
                        .addContainerGap(96, Short.MAX_VALUE))))
            .addGroup(StockPanelLayout.createSequentialGroup()
                .addGroup(StockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(StockPanelLayout.createSequentialGroup()
                        .addGap(135, 135, 135)
                        .addComponent(jLabel7)
                        .addGap(470, 470, 470)
                        .addComponent(jLabel5))
                    .addGroup(StockPanelLayout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(StockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, StockPanelLayout.createSequentialGroup()
                                .addComponent(FromDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ToDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, StockPanelLayout.createSequentialGroup()
                                .addComponent(StockReportButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(StockReport)))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(StockPanelLayout.createSequentialGroup()
                        .addGap(447, 447, 447)
                        .addComponent(jLabel3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StockPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 832, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(113, 113, 113))
        );
        StockPanelLayout.setVerticalGroup(
            StockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StockPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(StockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(StockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(StockPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(StockPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(4, 4, 4)
                .addGroup(StockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(StockPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StockPanelLayout.createSequentialGroup()
                        .addGroup(StockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(StockReport, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(StockReportButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(StockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ToDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FromDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)))
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9))
        );

        jPanel1.add(StockPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 1020, 470));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 990, 510));

        jPanel14.setBackground(new java.awt.Color(238, 238, 238));
        jPanel14.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel14MouseDragged(evt);
            }
        });
        jPanel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel14MousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1200, Short.MAX_VALUE)
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1200, 20));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void StockReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StockReportButtonActionPerformed
        // TODO add your handling code here:
        StockPanel.setVisible(true);
        Connection con=null;
        PreparedStatement ps;
        String query1;
        query1="SELECT staffID AS 'staffID_1', MIN(blankID) AS 'min_1', MAX(blankID) AS 'max_1' , COUNT(blankID) AS 'AMNT_1'\n" +
        "FROM blanks\n" +
        "WHERE status = 'Unused' AND blanks.blankID LIKE '4_%'\n" +
        "GROUP BY staffID\n" +
        "UNION\n" +
        "SELECT staffID AS 'staffID_1', MIN(blankID) AS 'min_1', MAX(blankID) AS 'max_1' , COUNT(blankID) AS 'AMNT_1'\n" +
        "FROM blanks\n" +
        "WHERE status = 'Unused' AND blanks.blankID LIKE '2_%'\n" +
        "GROUP BY staffID\n" +
        "UNION\n" +
        "SELECT staffID AS 'staffID_1', MIN(blankID) AS 'min_1', MAX(blankID) AS 'max_1' , COUNT(blankID) AS 'AMNT_1'\n" +
        "FROM blanks\n" +
        "WHERE status = 'Unused' AND blanks.blankID LIKE '1_%'\n" +
        "GROUP BY staffID;";

        String query2;
        query2="SELECT staffID AS 'staffID_2', MIN(blankID) AS 'min_2', MAX(blankID) AS 'max_2' , COUNT(blankID) AS 'AMNT_2'\n" +
        "FROM blanks\n" +
        "WHERE status = 'Assigned' AND blanks.blankID LIKE '4_%'\n" +
        "GROUP BY staffID\n" +
        "UNION\n" +
        "SELECT staffID AS 'staffID_2', MIN(blankID) AS 'min_2', MAX(blankID) AS 'max_2' , COUNT(blankID) AS 'AMNT_2'\n" +
        "FROM blanks\n" +
        "WHERE status = 'Assigned' AND blanks.blankID LIKE '2_%'\n" +
        "GROUP BY staffID\n" +
        "UNION\n" +
        "SELECT staffID AS 'staffID_2', MIN(blankID) AS 'min_2', MAX(blankID) AS 'max_2' , COUNT(blankID) AS 'AMNT_2'\n" +
        "FROM blanks\n" +
        "WHERE status = 'Assigned' AND blanks.blankID LIKE '1_%'\n" +
        "GROUP BY staffID;";

        String query3;
        query3="SELECT staffID AS 'staffID_3', MIN(blankID) AS 'min_3', MAX(blankID) AS 'max_3' , COUNT(blankID) AS 'AMNT_3'\n" +
        "FROM blanks\n" +
        "WHERE status = 'sold' AND blanks.blankID LIKE '4_%'\n" +
        "GROUP BY staffID\n" +
        "UNION\n" +
        "SELECT staffID AS 'staffID_3', MIN(blankID) AS 'min_3', MAX(blankID) AS 'max_3' , COUNT(blankID) AS 'AMNT_3'\n" +
        "FROM blanks\n" +
        "WHERE status = 'sold' AND blanks.blankID LIKE '2_%'\n" +
        "GROUP BY staffID\n" +
        "UNION\n" +
        "SELECT staffID AS 'staffID_3', MIN(blankID) AS 'min_3', MAX(blankID) AS 'max_3' , COUNT(blankID) AS 'AMNT_3'\n" +
        "FROM blanks\n" +
        "WHERE status = 'sold' AND blanks.blankID LIKE '1_%'\n" +
        "GROUP BY staffID;";

        String query4;
        query4="SELECT COUNT(blankID) AS 'Assigned AMNT', (SELECT COUNT(blankID) FROM blanks WHERE status='sold') AS 'Used AMNT', (SELECT COUNT(blankID) FROM blanks WHERE status='unused') AS 'Unused AMNT'\n" +
        "FROM blanks\n" +
        "WHERE status = 'Assigned'";

        try{
            for(int i=0;i<5;i++){
                if(i==0){
                    System.out.println("Filling unusedTable 1");
                    con=MyConnection.getConnection();
                    con.setAutoCommit(false);
                    System.out.println("Get Connection");
                    ps=con.prepareStatement(query1);

                    ResultSet rs=ps.executeQuery();
                    DefaultTableModel tm1=(DefaultTableModel)UnusedTable.getModel();
                    tm1.setRowCount(0);
                    while(rs.next()){

                        Object o1[]={rs.getInt("staffID_1"),rs.getLong("min_1"),rs.getLong("max_1"),rs.getInt("AMNT_1")};
                        tm1.addRow(o1);
                    }
                    con.setAutoCommit(true);
                    con.close();
                    System.out.println("Close Connection");
                }if(i==2){
                    System.out.println("Filling unusedTable 2");
                    con=MyConnection.getConnection();
                    con.setAutoCommit(false);
                    System.out.println("Get Connection");
                    ps=con.prepareStatement(query2);

                    ResultSet rs=ps.executeQuery();
                    DefaultTableModel tm2=(DefaultTableModel)AssignedTable.getModel();
                    tm2.setRowCount(0);
                    while(rs.next()){

                        Object o2[]={rs.getInt("staffID_2"),rs.getLong("min_2"),rs.getLong("max_2"),rs.getInt("AMNT_2")};
                        tm2.addRow(o2);
                    }
                    con.setAutoCommit(true);
                    con.close();
                    System.out.println("Close Connection");
                } if(i==3){
                    System.out.println("Filling unusedTable 3");
                    con=MyConnection.getConnection();
                    System.out.println("Get Connection");
                    con.setAutoCommit(false);
                    ps=con.prepareStatement(query3);

                    ResultSet rs=ps.executeQuery();
                    DefaultTableModel tm3=(DefaultTableModel)UsedTable.getModel();
                    tm3.setRowCount(0);
                    while(rs.next()){

                        Object o3[]={rs.getInt("staffID_3"),rs.getLong("min_3"),rs.getLong("max_3"),rs.getInt("AMNT_3")};
                        tm3.addRow(o3);
                    }
                    con.setAutoCommit(true);
                    con.close();
                    System.out.println("Close Connection");
                }
                if(i==4){
                    System.out.println("Filling unusedTable 4");
                    con=MyConnection.getConnection();
                    con.setAutoCommit(false);
                    System.out.println("Get Connection");
                    ps=con.prepareStatement(query4);

                    ResultSet rs=ps.executeQuery();
                    DefaultTableModel tm4=(DefaultTableModel)StockTotalTable.getModel();
                    tm4.setRowCount(0);
                    while(rs.next()){

                        Object o4[]={rs.getInt("Unused AMNT"),rs.getLong("Assigned AMNT"),rs.getLong("Used AMNT")};
                        tm4.addRow(o4);
                    }
                    con.setAutoCommit(true);
                    con.close();
                    System.out.println("Close Connection");
                }
            }
        }

        catch(Exception e){
            JOptionPane.showMessageDialog(this,"Errot in the code"+e);
        }

    }//GEN-LAST:event_StockReportButtonActionPerformed

    private void jPanel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseClicked
        systemAdmin admin = new systemAdmin(StaffIDLable.getText(),
        StaffNameLable.getText(),
        StaffRoleLable.getText());
                admin.setVisible(true);
                this.setVisible(false);
                admin.setLocationRelativeTo(null);
    }//GEN-LAST:event_jPanel3MouseClicked

    private void jPanel3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseEntered
        // TODO add your handling code here:
        jPanel3.setBackground(new Color(81, 135, 194));
    }//GEN-LAST:event_jPanel3MouseEntered

    private void jPanel3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseExited
        // TODO add your handling code here:
        jPanel3.setBackground(new Color(54,97,144));
    }//GEN-LAST:event_jPanel3MouseExited

    private void jPanel3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel3MousePressed

    private void jPanel15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel15MouseClicked
        // TODO add your handling code here:
        loginFrame lf = new loginFrame();
        lf.setVisible(true);
        lf.pack();
        lf.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_jPanel15MouseClicked

    private void jPanel15MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel15MouseEntered
        // TODO add your handling code here:
        jPanel15.setBackground(new Color(252, 116, 117));
    }//GEN-LAST:event_jPanel15MouseEntered

    private void jPanel15MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel15MouseExited
        // TODO add your handling code here:
        jPanel15.setBackground(new Color(252,68,69));
    }//GEN-LAST:event_jPanel15MouseExited

    private void jPanel14MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel14MouseDragged
        int cordX= evt.getXOnScreen();
        int cordY = evt.getYOnScreen();

        this.setLocation(cordX-mousepX, cordY-mousepY);
    }//GEN-LAST:event_jPanel14MouseDragged

    private void jPanel14MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel14MousePressed
        mousepX = evt.getX();
        mousepY = evt.getY();
    }//GEN-LAST:event_jPanel14MousePressed

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
        System.exit(0);
    }//GEN-LAST:event_jLabel9MouseClicked

    private void StockReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StockReportActionPerformed
        // TODO add your handling code here:
        String path = "";
        JFileChooser j = new JFileChooser();
        j.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int x = j.showSaveDialog(this);

        if (x==JFileChooser.APPROVE_OPTION)
        {
            path = j.getSelectedFile().getPath();
        }

        Document doc = new Document();
        doc.setPageSize(PageSize.A4.rotate());

        try {
            PdfWriter.getInstance(doc, new FileOutputStream(path+"Report.pdf"));

            doc.open();
            //assigned table
            // Font fontH1 = new Font(TIMES_ROMAN,2,Font.NORMAL);
            PdfPTable tbl1 = new PdfPTable(4);
            PdfPCell cell1 = new PdfPCell(new Paragraph("Assigned"));
            cell1.setColspan(4);
            cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
            tbl1.addCell(cell1);

            tbl1.addCell("Staff ID");
            tbl1.addCell("From");
            tbl1.addCell("To");
            tbl1.addCell("AMNT");
            tbl1.setSpacingAfter(25f);

            for(int i = 0; i<AssignedTable.getRowCount();i++)
            {

                String staffID = AssignedTable.getValueAt(i, 0).toString();

                String From = AssignedTable.getValueAt(i,1).toString();

                String To = AssignedTable.getValueAt(i,2).toString();

                String AMNT = AssignedTable.getValueAt(i,3).toString();

                tbl1.addCell(staffID);
                tbl1.addCell(From);
                tbl1.addCell(To);
                tbl1.addCell(AMNT);
            }

            doc.add(tbl1);

            //unused table

            PdfPTable tbl2 = new PdfPTable(4);
            PdfPCell cell2 = new PdfPCell(new Paragraph("Unused"));
            cell2.setColspan(4);
            cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            tbl2.addCell(cell2);

            tbl2.addCell("Staff ID");
            tbl2.addCell("From");
            tbl2.addCell("To");
            tbl2.addCell("AMNT");
            tbl2.setSpacingAfter(25f);

            for(int i =0; i<UnusedTable.getRowCount(); i++)
            {
                String staffID = UnusedTable.getValueAt(i, 0).toString();
                String From = UnusedTable.getValueAt(i,1).toString();
                String To = UnusedTable.getValueAt(i,2).toString();
                String AMNT = UnusedTable.getValueAt(i,3).toString();

                tbl2.addCell(staffID);
                tbl2.addCell(From);
                tbl2.addCell(To);
                tbl2.addCell(AMNT);
            }
            doc.add(tbl2);

            //used table
            PdfPTable tbl3 = new PdfPTable(4);
            PdfPCell cell3 = new PdfPCell(new Paragraph("Used"));
            cell3.setColspan(4);

            cell3.setHorizontalAlignment(Element.ALIGN_CENTER);
            tbl3.addCell(cell3);
            tbl3.addCell("Staff ID");
            tbl3.addCell("From");
            tbl3.addCell("To");
            tbl3.addCell("AMNT");
            tbl3.setSpacingAfter(25f);

            for(int i =0; i<UsedTable.getRowCount(); i++)
            {
                String staffID = UsedTable.getValueAt(i, 0).toString();
                String From = UsedTable.getValueAt(i,1).toString();
                String To = UsedTable.getValueAt(i,2).toString();
                String AMNT = UsedTable.getValueAt(i,3).toString();

                tbl3.addCell(staffID);
                tbl3.addCell(From);
                tbl3.addCell(To);
                tbl3.addCell(AMNT);
            }
            doc.add(tbl3);

            //AMNT

            PdfPTable tbl4 = new PdfPTable(3);
            PdfPCell cell4 = new PdfPCell(new Paragraph("AMNT"));
            cell4.setColspan(3);
            cell4.setHorizontalAlignment(Element.ALIGN_CENTER);
            tbl4.addCell(cell4);

            tbl4.addCell("Unused AMNT");
            tbl4.addCell("Assigned AMNT");
            tbl4.addCell("Used AMNT");
            tbl4.setSpacingAfter(25f);

            for(int i =0; i<StockTotalTable.getRowCount(); i++)
            {
                String UnusedAMNT = StockTotalTable.getValueAt(i, 0).toString();
                String AssignedAMNT = StockTotalTable.getValueAt(i,1).toString();
                String UsedAMNT = StockTotalTable.getValueAt(i,2).toString();

                tbl4.addCell(UnusedAMNT);
                tbl4.addCell(AssignedAMNT);
                tbl4.addCell(UsedAMNT);
                tbl4.setSpacingAfter(25f);

            }
            doc.add(tbl4);

            //Received

            PdfPTable tbl5 = new PdfPTable(4);
            PdfPCell cell5 = new PdfPCell(new Paragraph("Received"));
            cell5.setColspan(4);

            cell5.setHorizontalAlignment(Element.ALIGN_CENTER);
            tbl5.addCell(cell5);
            tbl5.addCell("Staff ID");
            tbl5.addCell("From");
            tbl5.addCell("To");
            tbl5.addCell("AMNT");
            tbl5.setSpacingAfter(25f);

            for(int i =0; i<RecievedTable.getRowCount(); i++)
            {
                String staffID = RecievedTable.getValueAt(i, 0).toString();
                String From = RecievedTable.getValueAt(i,1).toString();
                String To = RecievedTable.getValueAt(i,2).toString();
                String AMNT = RecievedTable.getValueAt(i,3).toString();

                tbl5.addCell(staffID);
                tbl5.addCell(From);
                tbl5.addCell(To);
                tbl5.addCell(AMNT);
            }
            doc.add(tbl5);

            //Sub Agents Amount
            PdfPTable tbl6 = new PdfPTable(4);
            PdfPCell cell6 = new PdfPCell(new Paragraph("Sub Agents Amount"));
            cell6.setColspan(4);
            cell6.setHorizontalAlignment(Element.ALIGN_CENTER);
            tbl6.addCell(cell6);

            tbl6.addCell("Staff ID");
            tbl6.addCell("From");
            tbl6.addCell("To");
            tbl6.addCell("AMNT");
            tbl6.setSpacingAfter(25f);

            for(int i =0; i<SubAgentTable.getRowCount(); i++)
            {
                String staffID = SubAgentTable.getValueAt(i, 0).toString();
                String From = SubAgentTable.getValueAt(i,1).toString();
                String To = SubAgentTable.getValueAt(i,2).toString();
                String AMNT = SubAgentTable.getValueAt(i,3).toString();

                tbl6.addCell(staffID);
                tbl6.addCell(From);
                tbl6.addCell(To);
                tbl6.addCell(AMNT);
            }
            doc.add(tbl6);

        } catch (FileNotFoundException ex) {
            Logger.getLogger(viewReport.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException ex) {
            Logger.getLogger(viewReport.class.getName()).log(Level.SEVERE, null, ex);
        }

        doc.close();
    }//GEN-LAST:event_StockReportActionPerformed

    private void StockReportButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StockReportButton1ActionPerformed
        // TODO add your handling code here:
        StockPanel.setVisible(true);
        

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String from = dateFormat.format(FromDate.getDate());
        String to = dateFormat.format(ToDate.getDate());
        Connection con=null;
        PreparedStatement ps;
        String recieved;
        recieved="SELECT blanks.staffID AS 'staffID_1' , MIN(blanks.blankID) AS 'min_1', MAX(blanks.blankID) AS 'max_1', COUNT(blanks.blankID) AS 'AMNT_1'\n" +
        "FROM blanks\n" +
        "WHERE blanks.blankID LIKE '42_%' AND blanks.staffID != -1 AND blanks.dateRecieved BETWEEN '"+from+"' AND '"+to+"'\n" +
        "GROUP BY staffID\n" +
        "UNION\n" +
        "SELECT blanks.staffID AS 'staffID_1' , MIN(blanks.blankID) AS 'min_1', MAX(blanks.blankID) AS 'max_1', COUNT(blanks.blankID) AS 'AMNT_1'\n" +
        "FROM blanks\n" +
        "WHERE blanks.blankID LIKE '44_%' AND blanks.staffID != -1 AND blanks.dateRecieved BETWEEN '"+from+"' AND '"+to+"'\n" +
        "UNION\n" +
        "SELECT blanks.staffID AS 'staffID_1' , MIN(blanks.blankID) AS 'min_1', MAX(blanks.blankID) AS 'max_1', COUNT(blanks.blankID) AS 'AMNT_1'\n" +
        "FROM blanks\n" +
        "WHERE blanks.blankID LIKE '2_%' AND blanks.staffID != -1 AND blanks.dateRecieved BETWEEN '"+from+"' AND '"+to+"'\n" +
        "GROUP BY staffID\n" +
        "UNION\n" +
        "SELECT blanks.staffID AS 'staffID_1' , MIN(blanks.blankID) AS 'min_1', MAX(blanks.blankID) AS 'max_1', COUNT(blanks.blankID) AS 'AMNT_1'\n" +
        "FROM blanks\n" +
        "WHERE blanks.blankID LIKE '1_%' AND blanks.staffID != -1 AND blanks.dateRecieved BETWEEN '"+from+"' AND '"+to+"'\n" +
        "GROUP BY staffID";

        String used;
        used="SELECT blanks.staffID AS 'staffID_2' , MIN(blanks.blankID) AS 'min_2', MAX(blanks.blankID) AS 'max_2', COUNT(blanks.blankID) AS 'AMNT_2'\n" +
        "FROM blanks\n" +
        "LEFT JOIN ticketsales ON blanks.blankID = ticketsales.blankID\n" +
        "WHERE  blanks.blankID LIKE '42_%' AND blanks.staffID != -1 AND ticketsales.dateSold BETWEEN '"+from+"' AND '"+to+"'\n" +
        "GROUP BY blanks.staffID\n" +
        "UNION\n" +
        "SELECT blanks.staffID AS 'staffID_2' , MIN(blanks.blankID) AS 'min_2', MAX(blanks.blankID) AS 'max_2', COUNT(blanks.blankID) AS 'AMNT_2'\n" +
        "FROM blanks\n" +
        "LEFT JOIN ticketsales ON blanks.blankID = ticketsales.blankID\n" +
        "WHERE blanks.blankID LIKE '44_%' AND blanks.staffID != -1 AND ticketsales.dateSold BETWEEN '"+from+"' AND '"+to+"'\n" +
        "GROUP BY blanks.staffID\n" +
        "UNION\n" +
        "SELECT blanks.staffID AS 'staffID_2' , MIN(blanks.blankID) AS 'min_2', MAX(blanks.blankID) AS 'max_2', COUNT(blanks.blankID) AS 'AMNT_2'\n" +
        "FROM blanks\n" +
        "LEFT JOIN ticketsales ON blanks.blankID = ticketsales.blankID\n" +
        "WHERE blanks.blankID LIKE '2_%' AND blanks.staffID != -1 AND ticketsales.dateSold BETWEEN '"+from+"' AND '"+to+"'\n" +
        "GROUP BY blanks.staffID\n" +
        "UNION\n" +
        "SELECT blanks.staffID AS 'staffID_2' , MIN(blanks.blankID) AS 'min_2', MAX(blanks.blankID) AS 'max_2', COUNT(blanks.blankID) AS 'AMNT_2'\n" +
        "FROM blanks\n" +
        "LEFT JOIN ticketsales ON blanks.blankID = ticketsales.blankID\n" +
        "WHERE blanks.blankID LIKE '1_%' AND blanks.staffID != -1 AND ticketsales.dateSold BETWEEN '"+from+"' AND '"+to+"'\n" +
        "GROUP BY blanks.staffID";

        String assigned;
        assigned="SELECT blanks.staffID AS 'staffID_3' , MIN(blanks.blankID) AS 'min_3', MAX(blanks.blankID) AS 'max_3', COUNT(blanks.blankID) AS 'AMNT_3'\n" +
        "FROM blanks\n" +
        "WHERE blanks.blankID LIKE '42%' AND blanks.staffID != -1 AND blanks.status LIKE 'assigned'AND blanks.dateAssigned BETWEEN '"+from+"' AND '"+to+"'\n" +
        "UNION\n" +
        "SELECT blanks.staffID AS 'staffID_3' , MIN(blanks.blankID) AS 'min_3', MAX(blanks.blankID) AS 'max_3', COUNT(blanks.blankID) AS 'AMNT_3'\n" +
        "FROM blanks\n" +
        "WHERE blanks.blankID LIKE '44%' AND blanks.staffID != -1 AND blanks.status LIKE 'assigned'AND blanks.dateAssigned BETWEEN '"+from+"' AND '"+to+"'\n" +
        "UNION\n" +
        "SELECT blanks.staffID AS 'staffID_3' , MIN(blanks.blankID) AS 'min_3', MAX(blanks.blankID) AS 'max_3', COUNT(blanks.blankID) AS 'AMNT_3'\n" +
        "FROM blanks\n" +
        "WHERE blanks.blankID LIKE '1%' AND blanks.staffID != -1 AND blanks.status LIKE 'assigned'AND blanks.dateAssigned BETWEEN '"+from+"' AND '"+to+"'\n" +
        "UNION\n" +
        "SELECT blanks.staffID AS 'staffID_3' , MIN(blanks.blankID) AS 'min_3', MAX(blanks.blankID) AS 'max_3', COUNT(blanks.blankID) AS 'AMNT_3' \n" +
        "FROM blanks\n" +
        "WHERE blanks.blankID LIKE '2%' AND blanks.staffID != -1 AND blanks.status LIKE 'assigned'AND blanks.dateAssigned BETWEEN '"+from+"' AND '"+to+"'";

        String unused;
        unused="SELECT blanks.staffID AS 'staffID_4' , MIN(blanks.blankID) AS 'min_4', MAX(blanks.blankID) AS 'max_4', COUNT(blanks.blankID) AS 'AMNT_4'\n" +
        "FROM blanks\n" +
        "WHERE status = 'Unused' AND blanks.blankID LIKE '42_%' AND blanks.staffID != -1 AND blanks.dateAssigned BETWEEN '"+from+"' AND '"+to+"'\n" +
        "GROUP BY staffID\n" +
        "UNION\n" +
        "SELECT blanks.staffID AS 'staffID_4' , MIN(blanks.blankID) AS 'min_4', MAX(blanks.blankID) AS 'max_4', COUNT(blanks.blankID) AS 'AMNT_4'\n" +
        "FROM blanks\n" +
        "WHERE status = 'Unused' AND blanks.blankID LIKE '44_%' AND blanks.staffID != -1 AND blanks.dateAssigned BETWEEN '"+from+"' AND '"+to+"'\n" +
        "GROUP BY staffID\n" +
        "UNION\n" +
        "SELECT blanks.staffID AS 'staffID_4' , MIN(blanks.blankID) AS 'min_4', MAX(blanks.blankID) AS 'max_4', COUNT(blanks.blankID) AS 'AMNT_4'\n" +
        "FROM blanks\n" +
        "WHERE status = 'Unused' AND blanks.blankID LIKE '2_%' AND blanks.staffID != -1 AND blanks.dateAssigned BETWEEN '"+from+"' AND '"+to+"'\n" +
        "GROUP BY staffID\n" +
        "UNION\n" +
        "SELECT blanks.staffID AS 'staffID_4' , MIN(blanks.blankID) AS 'min_4', MAX(blanks.blankID) AS 'max_4', COUNT(blanks.blankID) AS 'AMNT_4'\n" +
        "FROM blanks\n" +
        "WHERE status = 'Unused' AND blanks.blankID LIKE '1_%' AND blanks.staffID != -1 AND blanks.dateAssigned BETWEEN '"+from+"' AND '"+to+"'\n" +
        "GROUP BY staffID";

        String subAgent;
        subAgent="SELECT blanks.staffID AS 'staffID_5' , MIN(blanks.blankID) AS 'min_5', MAX(blanks.blankID) AS 'max_5', COUNT(blanks.blankID) AS 'AMNT_5'\n" +
        "FROM blanks\n" +
        "WHERE status != 'Paid' AND blanks.blankID LIKE '42%' AND blanks.staffID != -1  AND blanks.dateAssigned BETWEEN '"+from+"' AND '"+to+"'\n" +
        "GROUP BY staffID\n" +
        "UNION\n" +
        "SELECT blanks.staffID AS 'staffID_5' , MIN(blanks.blankID) AS 'min_5', MAX(blanks.blankID) AS 'max_5', COUNT(blanks.blankID) AS 'AMNT_5'\n" +
        "FROM blanks\n" +
        "WHERE status != 'Paid' AND blanks.blankID LIKE '44%' AND blanks.staffID != -1 AND blanks.dateAssigned BETWEEN '"+from+"' AND '"+to+"'\n" +
        "GROUP BY staffID\n" +
        "UNION\n" +
        "SELECT blanks.staffID AS 'staffID_5' , MIN(blanks.blankID) AS 'min_5', MAX(blanks.blankID) AS 'max_5', COUNT(blanks.blankID) AS 'AMNT_5'\n" +
        "FROM blanks\n" +
        "WHERE status != 'Paid' AND blanks.blankID LIKE '2%' AND blanks.staffID != -1 AND blanks.dateAssigned BETWEEN '"+from+"' AND '"+to+"'\n" +
        "GROUP BY staffID\n" +
        "UNION\n" +
        "SELECT blanks.staffID AS 'staffID_5' , MIN(blanks.blankID) AS 'min_5', MAX(blanks.blankID) AS 'max_5', COUNT(blanks.blankID) AS 'AMNT_5'\n" +
        "FROM blanks\n" +
        "WHERE status != 'Paid' AND blanks.blankID LIKE '1%' AND blanks.staffID != -1 AND blanks.dateAssigned BETWEEN '"+from+"' AND '"+to+"'\n" +
        "GROUP BY staffID";

        String total;
        total="SELECT COUNT(blankID) AS 'Total',\n" +
        " (SELECT COUNT(blankID) FROM blanks WHERE status='Assigned') AS 'Assigned AMNT',\n" +
        " (SELECT COUNT(blankID) FROM blanks WHERE status='Paid' ) AS 'Paid AMNT',\n" +
        " (SELECT COUNT(blankID) FROM blanks WHERE status!='Paid') AS 'Used AMNT'\n" +
        " FROM blanks\n" +
        " WHERE blanks.status = 'unused' AND blanks.staffID != -1 AND blanks.dateAssigned BETWEEN '"+from+"' AND '"+to+"'";

        try{
            for(int i=0;i<7;i++){
                if(i==0){
                    System.out.println("Filling unusedTable 1");
                    con=MyConnection.getConnection();
                    System.out.println("Get Connection");
                    ps=con.prepareStatement(recieved);

                    ResultSet rs=ps.executeQuery();
                    DefaultTableModel tm0=(DefaultTableModel)RecievedTable.getModel();
                    tm0.setRowCount(0);
                    while(rs.next()){

                        Object o0[]={rs.getInt("staffID_1"),rs.getString("min_1"),rs.getString("max_1"),rs.getInt("AMNT_1")};
                        tm0.addRow(o0);
                    }
                    con.close();
                    System.out.println("Close Connection");
                }if(i==1){
                    System.out.println("Filling unusedTable 2");
                    con=MyConnection.getConnection();
                    System.out.println("Get Connection");
                    ps=con.prepareStatement(used);

                    ResultSet rs=ps.executeQuery();
                    DefaultTableModel tm1=(DefaultTableModel)UsedTable.getModel();
                    tm1.setRowCount(0);
                    while(rs.next()){

                        Object o1[]={rs.getInt("staffID_2"),rs.getString("min_2"),rs.getString("max_2"),rs.getInt("AMNT_2")};
                        tm1.addRow(o1);
                    }
                    con.close();
                    System.out.println("Close Connection");
                } if(i==2){
                    System.out.println("Filling unusedTable 3");
                    con=MyConnection.getConnection();
                    System.out.println("Get Connection");
                    ps=con.prepareStatement(assigned);

                    ResultSet rs=ps.executeQuery();
                    DefaultTableModel tm2=(DefaultTableModel)AssignedTable.getModel();
                    tm2.setRowCount(0);
                    while(rs.next()){

                        Object o2[]={rs.getInt("staffID_3"),rs.getString("min_3"),rs.getString("max_3"),rs.getInt("AMNT_3")};
                        tm2.addRow(o2);
                    }
                    con.close();
                    System.out.println("Close Connection");
                }
                if(i==3){
                    System.out.println("Filling unusedTable 4");
                    con=MyConnection.getConnection();
                    System.out.println("Get Connection");
                    ps=con.prepareStatement(unused);

                    ResultSet rs=ps.executeQuery();
                    DefaultTableModel tm3=(DefaultTableModel)UnusedTable.getModel();
                    tm3.setRowCount(0);
                    while(rs.next()){

                        Object o3[]={rs.getInt("staffID_4"),rs.getString("min_4"),rs.getString("max_4"),rs.getInt("AMNT_4")};
                        tm3.addRow(o3);
                    }
                    con.close();
                    System.out.println("Close Connection");
                }
                if(i==4){
                    System.out.println("Filling unusedTable 4");
                    con=MyConnection.getConnection();
                    System.out.println("Get Connection");
                    ps=con.prepareStatement(subAgent);

                    ResultSet rs=ps.executeQuery();
                    DefaultTableModel tm4=(DefaultTableModel)SubAgentTable.getModel();
                    tm4.setRowCount(0);
                    while(rs.next()){

                        Object o4[]={rs.getInt("staffID_5"),rs.getString("min_5"),rs.getString("max_5"),rs.getInt("AMNT_5")};
                        tm4.addRow(o4);
                    }
                    con.close();
                }
                if(i==5){
                    System.out.println("Filling unusedTable 4");
                    con=MyConnection.getConnection();
                    System.out.println("Get Connection");
                    ps=con.prepareStatement(total);

                    ResultSet rs=ps.executeQuery();
                    DefaultTableModel tm5=(DefaultTableModel)StockTotalTable.getModel();
                    tm5.setRowCount(0);
                    while(rs.next()){

                        Object o5[]={rs.getInt("Total"),rs.getInt("Assigned AMNT"),rs.getString("Paid AMNT"),rs.getString("Used AMNT")};
                        tm5.addRow(o5);
                    }
                    con.close();
                }

            }
        }

        catch(Exception e){
            JOptionPane.showMessageDialog(this,"Errot in the code"+e);
        }

    }//GEN-LAST:event_StockReportButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StockTurnoverReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StockTurnoverReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StockTurnoverReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StockTurnoverReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StockTurnoverReport().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AssignedTable;
    private org.jdesktop.swingx.JXDatePicker FromDate;
    private javax.swing.JTable RecievedTable;
    private javax.swing.JLabel StaffIDLable;
    private javax.swing.JLabel StaffNameLable;
    private javax.swing.JLabel StaffRoleLable;
    private javax.swing.JPanel StockPanel;
    private javax.swing.JButton StockReport;
    private javax.swing.JButton StockReportButton;
    private javax.swing.JButton StockReportButton1;
    private javax.swing.JTable StockTotalTable;
    private javax.swing.JTable SubAgentTable;
    private org.jdesktop.swingx.JXDatePicker ToDate;
    private javax.swing.JTable UnusedTable;
    private javax.swing.JTable UsedTable;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
