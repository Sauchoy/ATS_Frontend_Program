/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package java_system;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.awt.Color;

/**
 *
 * The page to assign and manage blanks for the office manager, he can see all the blanks and staff and what blanks been assigned to them.  
 */
public class manageBlanks extends javax.swing.JFrame {
    
    int mousepX;
    int mousepY;
   

    /**
     * Creates new form manageBlanks.
     * Gets the time zone and date in format yyyy-MM-dd. 
     */
    public manageBlanks() {
        initComponents();
    }
    
    
    
    ZoneId z = ZoneId.of("Europe/London"); 
    LocalDate dayToday = LocalDate.now(z); 
    LocalTime timeToday = LocalTime.now(z); 
    String currentTime = timeToday.toString(); 
    String currentDate = dayToday.toString(); 
    SimpleDateFormat myformat = new SimpleDateFormat("yyyy-MM-dd");
    
    /**
     * 
     * @param staffID  sets staffID to StaffIDLabel to be displayed on ManageBlanks page.
     * @param firstName sets firstName to StaffNameLabel to be displayed on ManageBlanks page.
     * @param role  sets role to StaffRoleLabel to be displayed on ManageBlanks page.
     */
     public manageBlanks(String staffID,String firstName, String role) {
        initComponents();
        StaffIDLable.setText(staffID);
        StaffNameLable.setText(firstName);
        StaffRoleLable.setText(role);
        UpdateBlanksTable.doClick();
        UpdateAdvisorTable.doClick();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton4 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        AdvisorIDField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        BlankIDFromField = new javax.swing.JTextField();
        BlankIDToField = new javax.swing.JTextField();
        AssignBlanksButton = new javax.swing.JButton();
        ReassignBlanksButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        BlankToLable = new javax.swing.JLabel();
        BlankFromLable = new javax.swing.JLabel();
        AdvisorIDLable = new javax.swing.JLabel();
        DeleteBlanksButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        AdvisorTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        BlanksTable444 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        BlanksTable440 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        BlanksTable420 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        BlanksTable201 = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        BlanksTable101 = new javax.swing.JTable();
        UpdateBlanksTable = new javax.swing.JButton();
        UpdateAdvisorTable = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        BlanksNumber = new javax.swing.JSpinner();
        BlanksType = new javax.swing.JComboBox<>();
        AddBlanks = new javax.swing.JButton();
        blankNumberField = new javax.swing.JTextField();
        BlankNumberLable = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        StaffTable = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        TicketSearchTable = new javax.swing.JTable();
        BlankToSearch = new javax.swing.JTextField();
        SearchBlankButton = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel15 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        StaffRoleLable = new javax.swing.JLabel();
        StaffIDLable = new javax.swing.JLabel();
        StaffNameLable = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();

        jButton4.setText("jButton4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 204, 145));
        setLocationByPlatform(true);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(238, 238, 238));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(62, 112, 165));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setForeground(java.awt.Color.white);
        jLabel2.setText("AdvisorID: ");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(9, 19, -1, -1));

        AdvisorIDField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                AdvisorIDFieldKeyReleased(evt);
            }
        });
        jPanel1.add(AdvisorIDField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 179, -1));

        jLabel3.setForeground(java.awt.Color.white);
        jLabel3.setText("BlankID:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(64, 80, -1, -1));

        BlankIDFromField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                BlankIDFromFieldKeyReleased(evt);
            }
        });
        jPanel1.add(BlankIDFromField, new org.netbeans.lib.awtextra.AbsoluteConstraints(64, 102, 179, -1));

        BlankIDToField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                BlankIDToFieldKeyReleased(evt);
            }
        });
        jPanel1.add(BlankIDToField, new org.netbeans.lib.awtextra.AbsoluteConstraints(64, 136, 179, -1));

        AssignBlanksButton.setText("Assign Blanks");
        AssignBlanksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AssignBlanksButtonActionPerformed(evt);
            }
        });
        jPanel1.add(AssignBlanksButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 120, 30));

        ReassignBlanksButton.setText("Reassign Blanks");
        ReassignBlanksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReassignBlanksButtonActionPerformed(evt);
            }
        });
        jPanel1.add(ReassignBlanksButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(9, 196, 270, -1));

        jLabel7.setForeground(java.awt.Color.white);
        jLabel7.setText("From:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 106, -1, -1));

        jLabel8.setForeground(java.awt.Color.white);
        jLabel8.setText("To:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 30, -1));
        jPanel1.add(BlankToLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(64, 166, -1, -1));
        jPanel1.add(BlankFromLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(64, 132, -1, -1));
        jPanel1.add(AdvisorIDLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(64, 68, -1, -1));

        DeleteBlanksButton.setText("Delete Blanks");
        DeleteBlanksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBlanksButtonActionPerformed(evt);
            }
        });
        jPanel1.add(DeleteBlanksButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(159, 230, 120, 30));

        jPanel2.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 62, 289, 274));

        AdvisorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                " Name", "Surname", " ID", "Type", "BlankID", "Status"
            }
        ));
        jScrollPane1.setViewportView(AdvisorTable);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 60, 460, 240));

        jLabel4.setForeground(java.awt.Color.black);
        jLabel4.setText("Advisor's Table:");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 40, -1, -1));

        BlanksTable444.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Blank Type", "From", "To"
            }
        ));
        jScrollPane2.setViewportView(BlanksTable444);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 90, 301, 70));

        jLabel5.setForeground(java.awt.Color.black);
        jLabel5.setText("Blank's Table:");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 70, -1, -1));

        BlanksTable440.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Blank Type", "From", "To"
            }
        ));
        jScrollPane3.setViewportView(BlanksTable440);

        jPanel2.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 170, 301, 70));

        BlanksTable420.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Blank Type", "From", "To"
            }
        ));
        jScrollPane4.setViewportView(BlanksTable420);

        jPanel2.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 250, 301, 70));

        BlanksTable201.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Blank Type", "From", "To"
            }
        ));
        jScrollPane5.setViewportView(BlanksTable201);

        jPanel2.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 330, 301, 70));

        BlanksTable101.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Blank Type", "From", "To"
            }
        ));
        jScrollPane6.setViewportView(BlanksTable101);

        jPanel2.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 406, 301, 70));

        UpdateBlanksTable.setText("Update Table");
        UpdateBlanksTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBlanksTableActionPerformed(evt);
            }
        });
        jPanel2.add(UpdateBlanksTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 490, 300, -1));

        UpdateAdvisorTable.setText("Update Table");
        UpdateAdvisorTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateAdvisorTableActionPerformed(evt);
            }
        });
        jPanel2.add(UpdateAdvisorTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 500, 460, -1));

        jPanel3.setBackground(new java.awt.Color(62, 112, 165));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel3.add(BlanksNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(211, 78, 69, -1));

        BlanksType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "444", "440", "420", "201", "101" }));
        BlanksType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlanksTypeActionPerformed(evt);
            }
        });
        jPanel3.add(BlanksType, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 78, -1, -1));

        AddBlanks.setText("Add Blanks");
        AddBlanks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBlanksActionPerformed(evt);
            }
        });
        jPanel3.add(AddBlanks, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 270, -1));

        blankNumberField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                blankNumberFieldKeyReleased(evt);
            }
        });
        jPanel3.add(blankNumberField, new org.netbeans.lib.awtextra.AbsoluteConstraints(64, 79, 135, -1));
        jPanel3.add(BlankNumberLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(152, 60, -1, -1));

        jLabel9.setForeground(java.awt.Color.white);
        jLabel9.setText("Type:");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 26, -1, -1));

        jLabel10.setForeground(java.awt.Color.white);
        jLabel10.setText("Blank Number:");
        jPanel3.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(67, 26, -1, -1));

        jLabel11.setForeground(java.awt.Color.white);
        jLabel11.setText("Amount:");
        jPanel3.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(211, 26, -1, -1));

        jPanel2.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 342, 289, 192));

        StaffTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Staff ID", "Name", "Surname", "Role"
            }
        ));
        jScrollPane7.setViewportView(StaffTable);

        jPanel2.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 310, 460, 190));

        TicketSearchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "BlankID", "Status", "Staff Name", "Customer Name", "Customer Surname"
            }
        ));
        jScrollPane8.setViewportView(TicketSearchTable);

        jPanel2.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 540, 1090, 53));

        BlankToSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlankToSearchActionPerformed(evt);
            }
        });
        jPanel2.add(BlankToSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 600, 210, 30));

        SearchBlankButton.setText("Search");
        SearchBlankButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBlankButtonActionPerformed(evt);
            }
        });
        jPanel2.add(SearchBlankButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 600, 100, -1));

        jLabel12.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(41, 76, 113));
        jLabel12.setText("X");
        jLabel12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel12MouseClicked(evt);
            }
        });
        jPanel2.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 0, 20, -1));

        jLabel1.setForeground(java.awt.Color.black);
        jLabel1.setText("Manage Blanks");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 0, -1, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 1120, 650));

        jPanel5.setBackground(new java.awt.Color(41, 76, 113));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(54, 97, 144));
        jPanel4.setForeground(new java.awt.Color(204, 204, 204));
        jPanel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel4MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel4MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel4MousePressed(evt);
            }
        });

        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Home");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addComponent(jLabel15)
                .addContainerGap(88, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel5.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 210, 40));

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("Office Manager");
        jPanel5.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 190, -1));

        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("Role:");
        jPanel5.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 31, -1));

        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("Name:");
        jPanel5.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setText("Staff ID:");
        jPanel5.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel5.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 190, 10));

        jPanel15.setBackground(new java.awt.Color(252, 68, 69));
        jPanel15.setForeground(new java.awt.Color(255, 255, 255));
        jPanel15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel15MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel15MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel15MouseExited(evt);
            }
        });

        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setText("Log Out");

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addContainerGap(85, Short.MAX_VALUE)
                .addComponent(jLabel24)
                .addGap(80, 80, 80))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        jPanel5.add(jPanel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 120, 210, -1));

        StaffRoleLable.setForeground(java.awt.Color.white);
        StaffRoleLable.setText("jLabel9");
        jPanel5.add(StaffRoleLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 90, -1, -1));

        StaffIDLable.setForeground(java.awt.Color.white);
        StaffIDLable.setText("jLabel8");
        jPanel5.add(StaffIDLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 70, -1, -1));

        StaffNameLable.setForeground(java.awt.Color.white);
        StaffNameLable.setText("jLabel9");
        jPanel5.add(StaffNameLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, -1, -1));

        getContentPane().add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 210, 650));

        jPanel14.setBackground(new java.awt.Color(238, 238, 238));
        jPanel14.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel14MouseDragged(evt);
            }
        });
        jPanel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel14MousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1320, Short.MAX_VALUE)
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1320, 20));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void UpdateAdvisorTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateAdvisorTableActionPerformed
        // TODO add your handling code here:
       PreparedStatement ps;
       String query="SELECT firstName, lastName, s.staffID, b.type, b.blankID, b.status FROM staff AS s INNER JOIN blanks AS b WHERE b.staffID=s.staffID";
       Connection con =null;
       
     try{  
         con=MyConnection.getConnection();
         System.out.println("Get Connection");
         ps=con.prepareStatement(query);
         ResultSet rs=ps.executeQuery();
         DefaultTableModel tm=(DefaultTableModel)AdvisorTable.getModel();
         tm.setRowCount(0); 
         while(rs.next()){
             Object o[]={rs.getString("firstName"),rs.getString("lastName"),rs.getInt("s.staffID"),rs.getInt("b.type"),rs.getString("b.blankID"),rs.getString("b.status")};
             tm.addRow(o);
         }
         updateStaffTable();
         
          con.close();
                 System.out.println("Close Connection");
         
    }                                           
    catch(Exception e){
        JOptionPane.showMessageDialog(this,e);
    }finally{
         
         
         
     }   
        
    }//GEN-LAST:event_UpdateAdvisorTableActionPerformed

    public void updateStaffTable(){
         PreparedStatement ps;
       String query="SELECT firstName, lastName, staffID, role FROM staff";
       Connection con =null;
       
     try{  
         con=MyConnection.getConnection();
         System.out.println("Get Connection");
         ps=con.prepareStatement(query);
         ResultSet rs=ps.executeQuery();
         DefaultTableModel tm=(DefaultTableModel)StaffTable.getModel();
         tm.setRowCount(0); 
         while(rs.next()){
             Object o[]={rs.getInt("staffID"),rs.getString("firstName"),rs.getString("lastName"),rs.getString("role")};
             tm.addRow(o);
         }

          con.close();
                 System.out.println("Close Connection");
         
    }                                           
    catch(Exception e){
        JOptionPane.showMessageDialog(this,e);
    }finally{
         
         
         
     }   
    }
    
    
    
    private void UpdateBlanksTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBlanksTableActionPerformed
        // TODO add your handling code here:
        
      Connection con=null;
       
     try{  
         con=MyConnection.getConnection();
         System.out.println("Get Connection");
        PreparedStatement ps;
        String query="SELECT type, MAX(blankID),MIN(blankID) FROM `blanks` WHERE type=444;";
         ps=con.prepareStatement(query);
         ResultSet rs=ps.executeQuery();
         DefaultTableModel tm=(DefaultTableModel)BlanksTable444.getModel();
         tm.setRowCount(0); 
         while(rs.next()){
             Object o[]={rs.getInt("type"),rs.getString("MIN(blankID)"),rs.getString("MAX(blankID)")};
             tm.addRow(o);
         }  
         
         PreparedStatement ps1;
        String query1="SELECT type, MAX(blankID),MIN(blankID) FROM `blanks` WHERE type=440;";
         ps1=con.prepareStatement(query1);
         ResultSet rs1=ps1.executeQuery();
         DefaultTableModel tm1=(DefaultTableModel)BlanksTable440.getModel();
         tm1.setRowCount(0); 
         while(rs1.next()){
             Object o[]={rs1.getInt("type"),rs1.getString("MIN(blankID)"),rs1.getString("MAX(blankID)")};
             tm1.addRow(o);
         }  
         
          PreparedStatement ps2;
        String query2="SELECT type, MAX(blankID),MIN(blankID) FROM `blanks` WHERE type=420;";
         ps2=con.prepareStatement(query2);
         ResultSet rs2=ps2.executeQuery();
         DefaultTableModel tm2=(DefaultTableModel)BlanksTable420.getModel();
         tm2.setRowCount(0); 
         while(rs2.next()){
             Object o[]={rs2.getInt("type"),rs2.getString("MIN(blankID)"),rs2.getString("MAX(blankID)")};
             tm2.addRow(o);
         }  
         
          PreparedStatement ps3;
        String query3="SELECT type, MAX(blankID),MIN(blankID) FROM `blanks` WHERE type=201;";
         ps3=con.prepareStatement(query3);
         ResultSet rs3=ps3.executeQuery();
         DefaultTableModel tm3=(DefaultTableModel)BlanksTable201.getModel();
         tm3.setRowCount(0); 
         while(rs3.next()){
             Object o[]={rs3.getInt("type"),rs3.getString("MIN(blankID)"),rs3.getString("MAX(blankID)")};
             tm3.addRow(o);
         }  
         
          PreparedStatement ps4;
        String query4="SELECT type, MAX(blankID),MIN(blankID) FROM `blanks` WHERE type=101;";
         ps4=con.prepareStatement(query4);
         ResultSet rs4=ps4.executeQuery();
         DefaultTableModel tm4=(DefaultTableModel)BlanksTable101.getModel();
         tm4.setRowCount(0); 
         while(rs4.next()){
             Object o[]={rs4.getInt("type"),rs4.getString("MIN(blankID)"),rs4.getString("MAX(blankID)")};
             tm4.addRow(o);
         }  
         
    }                                           
    catch(Exception e){
        JOptionPane.showMessageDialog(this,e);
    }finally{
         if(con!=null){
             try {
                 con.close();
                 System.out.println("Close Connection");
             } catch (SQLException ex) {
                 Logger.getLogger(manageBlanks.class.getName()).log(Level.SEVERE, null, ex);
             }
             
         }
     }
        
        
    }//GEN-LAST:event_UpdateBlanksTableActionPerformed

    private void AddBlanksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBlanksActionPerformed
        // TODO add your handling code here:
        if(blankNumberField.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(null,"Blank Number Field is empty ");
            
        }else if(blankNumberField.getText().length()!=8){
            JOptionPane.showMessageDialog(null,"Wrong Length for the Blank Number "+blankNumberField.getText().length());
            
        }
        
        Connection con=null;
        
        int btype=Integer.valueOf((String) BlanksType.getSelectedItem()); 
        int blanks=(Integer)BlanksNumber.getValue(); 
        int bnum= Integer.parseInt(blankNumberField.getText());
   
      
        
        try{
            con=MyConnection.getConnection();
            PreparedStatement ps1=con.prepareStatement("SELECT  MAX(`blankNumber`) FROM `blanks` WHERE type="+btype+";");
            ResultSet rs=ps1.executeQuery();
             int myvar=bnum;
                insert(myvar,btype,blanks,con);    

               
                   System.out.println(" max in the db "+myvar); 

                
             JOptionPane.showMessageDialog(null,"Blanks Added");
        UpdateBlanksTable.doClick();
        }catch (SQLException ex){
         JOptionPane.showMessageDialog(null,"Wrong Input in the ID field"); 
         Logger.getLogger(RecordPayment.class.getName()).log(Level.SEVERE,null,ex);
            
     }
      
    }//GEN-LAST:event_AddBlanksActionPerformed

    
    /** this function adds the amount of blanks that was selected in the GUI and is called by the code that check what is the lates blank that was added as a number.
     * 
     * @param myvar is the biggest blank in the databse
     * @param btype btype is blank type which it should be assigned to 
     * @param blanks blanks is the nubmer that follows the blank type going from the highest in the database to the number of blanks specifed 
     * @param con is the JBDC connection
     */
    public void insert(int myvar, int btype, int blanks,Connection con){
         try{
            for(int i=myvar;i<myvar+blanks+1;i++){  
                PreparedStatement ps;
                String query="INSERT INTO `blanks`(`blankID`, `staffID`, `type`, `status`, `blankNumber`, `commissionRateID`, `dateRecieved`, `dateAssigned`,Coupons,exchangeRateID,taxID) VALUES (?,?,?,?,?,?,?,?,?,?,?)";
                con.setAutoCommit(false);
                ps=con.prepareStatement(query);
                
                
        String blank="";
        int z=8-String.valueOf(i).length();
        for(int k=0;k<z;k++){
            blank=blank+"0";
        }

             ps.setString(1,Integer.toString(btype) + blank+String.valueOf(i));
             ps.setInt(2,-1);
             ps.setInt(3,btype);
             ps.setString(4,"unused");
             ps.setInt(5,i);
             ps.setInt(6,0);
             ps.setString(7,currentDate);
             ps.setString(8,currentDate);
             ps.setInt(9,0);
             ps.setInt(10,-1);
             ps.setInt(11,-1);
         if(ps.executeUpdate()>0){
             System.out.println("Blank added "+i);

         }
            }
             if(con!=null){
                 try {
                     con.setAutoCommit(true);
                     con.close();
                     
                 }
                 
                 catch (SQLException ex) {
                     Logger.getLogger(manageBlanks.class.getName()).log(Level.SEVERE, null, ex);
                 }
             }
            
            
         
     }catch (SQLException ex){
         Logger.getLogger(RecordPayment.class.getName()).log(Level.SEVERE,null,ex);
         
     }
    }
    

    
    /** this makes the string ID into a int data type.
     * 
     * @param myid id from string to integer.
     * @return returns the id as an int data type.
     */
     public int idtoint(String myid){ 
         try{
         int z=3;
         if(myid.length()<8){
       while(myid.charAt(z)!='0'){
           z++;}
           }return Integer.parseInt(myid.substring(z));
         }catch(Exception ex){             
                  JOptionPane.showMessageDialog(null,"Warrning no action was taken check the data entered");

            
            
         }
            return -1;
         }
         
   
    private void AssignBlanksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AssignBlanksButtonActionPerformed
        // TODO add your handling code here:
        if(AdvisorIDField.getText().trim().isEmpty() && BlankIDFromField.getText().trim().isEmpty() && BlankIDToField.getText().trim().isEmpty()){
            AdvisorIDLable.setText("Advisor ID is empty");
            BlankToLable.setText("Blank To is empty");
            BlankFromLable.setText("Blank From is empty");
        }
        else if(AdvisorIDField.getText().trim().isEmpty() && BlankIDFromField.getText().trim().isEmpty()){
            BlankFromLable.setText("Blank From is empty");
            AdvisorIDLable.setText("Advisor ID is empty");
        }
         else if(AdvisorIDField.getText().trim().isEmpty() && BlankIDToField.getText().trim().isEmpty()){
            BlankToLable.setText("Blank To is empty");
            AdvisorIDLable.setText("Advisor ID is empty");
        }
         else if(BlankIDFromField.getText().trim().isEmpty() && BlankIDToField.getText().trim().isEmpty()){
            BlankToLable.setText("Blank To is empty");
            BlankFromLable.setText("Blank From is empty");
        }
        else if(BlankIDFromField.getText().trim().isEmpty()){
            BlankFromLable.setText("Blank From is empty");
        }
        else if(BlankIDToField.getText().trim().isEmpty()){
             BlankToLable.setText("Blank To is empty");
        }
         else if(AdvisorIDField.getText().trim().isEmpty()){
             BlankToLable.setText("Blank To is empty");
             AdvisorIDLable.setText("Advisor ID is empty");
        }
        
        
        
        String adid=AdvisorIDField.getText();
        String bfrom=BlankIDFromField.getText(); 
        String bto= BlankIDToField.getText(); 
       // System.out.println(bto+bfrom);
        Connection con=null;
  
         try{
             con=MyConnection.getConnection();
             con.setAutoCommit(false);
             System.out.println("Get Connection");
          for(int i=idtoint(bfrom);i<idtoint(bto)+1;i++){
            String blank=bfrom.substring(0,3);
            int z=8-String.valueOf(i).length();
            for(int k=0;k<z;k++){
                blank=blank+"0";
            }
            blank=blank+String.valueOf(i);
           
           System.out.println("the where part "+blank+" the id "+adid);
           PreparedStatement ps;
           System.out.println("CURRENT DATE "+currentDate);
          
          String myDate=currentDate.replaceAll("-",""); 
                String query="UPDATE blanks SET staffID="+adid +",status='assigned',dateAssigned='"+currentDate+"' WHERE blankID="+blank+" AND staffID=-1;";

                ps=con.prepareStatement(query);
           
            ps.execute();
           
           }       
          con.setAutoCommit(true);
           con.close();
            System.out.println("Close Connection");
            UpdateAdvisorTable.doClick();
                 System.out.println(" assigned from "+bfrom+"to"+bto+"whith advisor"+adid);
        }catch (SQLException ex){
         Logger.getLogger(RecordPayment.class.getName()).log(Level.SEVERE,null,ex);
        JOptionPane.showMessageDialog(null,"Warrning no action was taken check the data entered ");
         
     }
        
        
        
    }//GEN-LAST:event_AssignBlanksButtonActionPerformed

    private void ReassignBlanksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReassignBlanksButtonActionPerformed
        // TODO add your handling code here:
         if(AdvisorIDField.getText().trim().isEmpty() && BlankIDFromField.getText().trim().isEmpty() && BlankIDToField.getText().trim().isEmpty()){
            AdvisorIDLable.setText("Advisor ID is empty");
            BlankToLable.setText("Blank To is empty");
            BlankFromLable.setText("Blank From is empty");
        }
        else if(AdvisorIDField.getText().trim().isEmpty() && BlankIDFromField.getText().trim().isEmpty()){
            BlankFromLable.setText("Blank From is empty");
            AdvisorIDLable.setText("Advisor ID is empty");
        }
         else if(AdvisorIDField.getText().trim().isEmpty() && BlankIDToField.getText().trim().isEmpty()){
            BlankToLable.setText("Blank To is empty");
            AdvisorIDLable.setText("Advisor ID is empty");
        }
         else if(BlankIDFromField.getText().trim().isEmpty() && BlankIDToField.getText().trim().isEmpty()){
            BlankToLable.setText("Blank To is empty");
            BlankFromLable.setText("Blank From is empty");
        }
        else if(BlankIDFromField.getText().trim().isEmpty()){
            BlankFromLable.setText("Blank From is empty");
        }
        else if(BlankIDToField.getText().trim().isEmpty()){
             BlankToLable.setText("Blank To is empty");
        }
         else if(AdvisorIDField.getText().trim().isEmpty()){
             BlankToLable.setText("Blank To is empty");
             AdvisorIDLable.setText("Advisor ID is empty");
        }
        
        
        
        
        String adid=AdvisorIDField.getText();
        String bfrom=BlankIDFromField.getText(); 
        String bto= BlankIDToField.getText(); 
        Connection con=null;
  
         try{
             con=MyConnection.getConnection();
             con.setAutoCommit(false);
             System.out.println("Get Connection");
          for(int i=idtoint(bfrom);i<idtoint(bto)+1;i++){
            String blank=bfrom.substring(0,3);
            int z=8-String.valueOf(i).length();
            for(int k=0;k<z;k++){
                blank=blank+"0";
            }
            blank=blank+String.valueOf(i);
           
           System.out.println("the where part "+blank+" the id "+adid);
           PreparedStatement ps;

            String myDate="";

                myDate=currentDate.replaceAll("-",""); 

                String query="UPDATE blanks SET staffID="+adid +",status='assigned',dateAssigned='"+currentDate+"' WHERE blankID="+blank+" AND status='assigned';";

                ps=con.prepareStatement(query);
           

            ps.execute();
           }       
          con.setAutoCommit(true);
          con.close();
           System.out.println("Close Connection");
           UpdateAdvisorTable.doClick();
                 System.out.println(" assigned from "+bfrom+"to"+bto+"whith advisor"+adid);
        }catch (SQLException ex){
        JOptionPane.showMessageDialog(null,"Warrning no action was taken check the data entered ");
        Logger.getLogger(RecordPayment.class.getName()).log(Level.SEVERE,null,ex);
         
     }
        
    }//GEN-LAST:event_ReassignBlanksButtonActionPerformed

    private void BlanksTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlanksTypeActionPerformed
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_BlanksTypeActionPerformed

    private void AdvisorIDFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AdvisorIDFieldKeyReleased
        // TODO add your handling code here:
        AdvisorIDLable.setText("");
    }//GEN-LAST:event_AdvisorIDFieldKeyReleased

    private void BlankIDFromFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BlankIDFromFieldKeyReleased
        // TODO add your handling code here:
        BlankFromLable.setText("");
    }//GEN-LAST:event_BlankIDFromFieldKeyReleased

    private void BlankIDToFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BlankIDToFieldKeyReleased
        // TODO add your handling code here:
        BlankToLable.setText("");
    }//GEN-LAST:event_BlankIDToFieldKeyReleased

    private void blankNumberFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_blankNumberFieldKeyReleased
        // TODO add your handling code here:
        BlankNumberLable.setText("");
    }//GEN-LAST:event_blankNumberFieldKeyReleased

    private void DeleteBlanksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBlanksButtonActionPerformed
        // TODO add your handling code here:
        
        if(BlankIDFromField.getText().trim().isEmpty() && BlankIDToField.getText().trim().isEmpty()){
            BlankToLable.setText("Blank To is empty");
            BlankFromLable.setText("Blank From is empty");
        }
        else if(BlankIDFromField.getText().trim().isEmpty()){
            BlankFromLable.setText("Blank From is empty");
        }
        else if(BlankIDToField.getText().trim().isEmpty()){
             BlankToLable.setText("Blank To is empty");
        }
        
        
        
        String bfrom=BlankIDFromField.getText(); 
        String bto= BlankIDToField.getText(); 

        Connection con=null;
  
         try{
             con=MyConnection.getConnection();
             con.setAutoCommit(false);
             System.out.println("Get Connection");
          for(int i=idtoint(bfrom);i<idtoint(bto)+1;i++){
            String blank=bfrom.substring(0,3);
            int z=8-String.valueOf(i).length();
            for(int k=0;k<z;k++){
                blank=blank+"0";
            }
            blank=blank+String.valueOf(i);

           PreparedStatement ps;

                String query="DELETE FROM `blanks` WHERE blankID="+blank+" AND status='unused'";
                ps=con.prepareStatement(query);

            ps.execute();
            
           
           }       
          con.setAutoCommit(true);
           con.close();

            System.out.println("Close Connection");
            UpdateAdvisorTable.doClick();
            UpdateBlanksTable.doClick();
                 System.out.println(" deleted from "+bfrom+"to"+bto);
        }catch (SQLException ex){
         Logger.getLogger(RecordPayment.class.getName()).log(Level.SEVERE,null,ex);
         JOptionPane.showMessageDialog(null,"Warrning no action was taken check the data entered ");
     }
        
        
    }//GEN-LAST:event_DeleteBlanksButtonActionPerformed

    private void BlankToSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlankToSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BlankToSearchActionPerformed

    private void SearchBlankButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBlankButtonActionPerformed
        // TODO add your handling code here:
        String blank=BlankToSearch.getText();
        Connection con;
       try{
            con=MyConnection.getConnection();
            PreparedStatement ps1=con.prepareStatement("SELECT blanks.blankID, blanks.status, staff.firstName,customer.firstName,customer.lastName FROM `blanks` \n" +
"LEFT JOIN ticketsales ON ticketsales.blankID=blanks.blankID\n" +
"LEFT JOIN customer ON ticketsales.customerID=customer.customerID\n" +
"LEFT JOIN staff ON blanks.staffID=staff.staffID\n" +
"WHERE blanks.blankID="+blank+";");
            
            ResultSet rs=ps1.executeQuery();
                if (rs.next()) {
                        DefaultTableModel tm=(DefaultTableModel)TicketSearchTable.getModel();
                        tm.setRowCount(0); 
                         Object o[]={blank,rs.getString("blanks.status"),rs.getString("staff.firstName"),rs.getString("customer.firstName"),rs.getString("customer.lastName")};
                        tm.addRow(o);
                        
                 System.out.println("Close Connection");
                    
                    if(rs.getString("blanks.status").equals("sold")){
                        
                    }else if(rs.getString("blanks.status").equals("paid")){
                        JOptionPane.showMessageDialog(null,"blank was sold and paid");
                        
                    }else if(rs.getString("blanks.status").equals("unused")){
                        JOptionPane.showMessageDialog(null,"blank is unused");
                        
                    }else if(rs.getString("blanks.status").equals("assigned")){
                        JOptionPane.showMessageDialog(null,"blank is assigned");
                    }else{
                        JOptionPane.showMessageDialog(null,"No blank found");
                    }
                }else{
                        JOptionPane.showMessageDialog(null,"No blank found");
                }con.close();
        }catch (SQLException ex){

          JOptionPane.showMessageDialog(null,"No blank found or wrong input");
         
        }
            
        
    }//GEN-LAST:event_SearchBlankButtonActionPerformed

    private void jPanel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseClicked
        if(StaffRoleLable.getText().equals("Office_Manager")){
        officeManager om = new officeManager(StaffIDLable.getText(),
        StaffNameLable.getText(),
        StaffRoleLable.getText());

        om.setVisible(true);
        om.pack();
        om.setLocationRelativeTo(null);
        
        this.dispose();
        }else{
            systemAdmin admin = new systemAdmin(StaffIDLable.getText(),
        StaffNameLable.getText(),
        StaffRoleLable.getText());
                admin.setVisible(true);
                this.setVisible(false);
                admin.setLocationRelativeTo(null);     
        }
    }//GEN-LAST:event_jPanel4MouseClicked

    private void jPanel4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseEntered
        // TODO add your handling code here:
        jPanel4.setBackground(new Color(81, 135, 194));
    }//GEN-LAST:event_jPanel4MouseEntered

    private void jPanel4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseExited
        // TODO add your handling code here:
        jPanel4.setBackground(new Color(54,97,144));
    }//GEN-LAST:event_jPanel4MouseExited

    private void jPanel4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel4MousePressed

    private void jPanel15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel15MouseClicked
        // TODO add your handling code here:
        loginFrame lf = new loginFrame();
        lf.setVisible(true);
        lf.pack();
        lf.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_jPanel15MouseClicked

    private void jPanel15MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel15MouseEntered
        // TODO add your handling code here:
        jPanel15.setBackground(new Color(252, 116, 117));
    }//GEN-LAST:event_jPanel15MouseEntered

    private void jPanel15MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel15MouseExited
        // TODO add your handling code here:
        jPanel15.setBackground(new Color(252,68,69));
    }//GEN-LAST:event_jPanel15MouseExited

    private void jPanel14MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel14MouseDragged
        int cordX= evt.getXOnScreen();
        int cordY = evt.getYOnScreen();

        this.setLocation(cordX-mousepX, cordY-mousepY);
    }//GEN-LAST:event_jPanel14MouseDragged

    private void jPanel14MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel14MousePressed
        mousepX = evt.getX();
        mousepY = evt.getY();
    }//GEN-LAST:event_jPanel14MousePressed

    private void jLabel12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel12MouseClicked
        System.exit(0);
    }//GEN-LAST:event_jLabel12MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(manageBlanks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(manageBlanks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(manageBlanks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(manageBlanks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new manageBlanks().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBlanks;
    private javax.swing.JTextField AdvisorIDField;
    private javax.swing.JLabel AdvisorIDLable;
    private javax.swing.JTable AdvisorTable;
    private javax.swing.JButton AssignBlanksButton;
    private javax.swing.JLabel BlankFromLable;
    private javax.swing.JTextField BlankIDFromField;
    private javax.swing.JTextField BlankIDToField;
    private javax.swing.JLabel BlankNumberLable;
    private javax.swing.JLabel BlankToLable;
    private javax.swing.JTextField BlankToSearch;
    private javax.swing.JSpinner BlanksNumber;
    private javax.swing.JTable BlanksTable101;
    private javax.swing.JTable BlanksTable201;
    private javax.swing.JTable BlanksTable420;
    private javax.swing.JTable BlanksTable440;
    private javax.swing.JTable BlanksTable444;
    private javax.swing.JComboBox<String> BlanksType;
    private javax.swing.JButton DeleteBlanksButton;
    private javax.swing.JButton ReassignBlanksButton;
    private javax.swing.JButton SearchBlankButton;
    private javax.swing.JLabel StaffIDLable;
    private javax.swing.JLabel StaffNameLable;
    private javax.swing.JLabel StaffRoleLable;
    private javax.swing.JTable StaffTable;
    private javax.swing.JTable TicketSearchTable;
    private javax.swing.JButton UpdateAdvisorTable;
    private javax.swing.JButton UpdateBlanksTable;
    private javax.swing.JTextField blankNumberField;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
