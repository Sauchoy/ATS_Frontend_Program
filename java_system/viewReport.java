/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package java_system;


import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import static com.itextpdf.text.Font.FontFamily.TIMES_ROMAN;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.io.FileOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * The page for the office manager to see all the reports for the sales and advisors.
 */
public class viewReport extends javax.swing.JFrame {
    
    int mousepX;
    int mousepY;

    /**
     * Creates new form viewReport1
     */
    public viewReport() {
        initComponents();
    }

    
    /** creates new form viewReport
     * 
     * @param staffID Gets staffID from database and displays it on page.
     * @param firstName Gets firstName from database and displays it on page.
     * @param role  Gets role from database and displays it on page.
     */
       public viewReport(String staffID,String firstName, String role) {
        initComponents();
        StaffIDLable.setText(staffID);
        StaffNameLable.setText(firstName);
        StaffRoleLable.setText(role);
         InterlinePanel.setVisible(false);
            DomesticPanel.setVisible(false);
                      GlobalDomesticPanel1.setVisible(false);
                        GlobalInterlinePanel1.setVisible(false);
        StockPanel.setVisible(false);
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        StaffNameLable = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        StaffIDLable = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        StaffRoleLable = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        StockReportButton = new javax.swing.JButton();
        USDRateButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        StaffIDField = new javax.swing.JTextField();
        GlobalReport = new javax.swing.JButton();
        ReportTypeComboBox = new javax.swing.JComboBox<>();
        ReportTypeComboBox1 = new javax.swing.JComboBox<>();
        IndividualReport = new javax.swing.JButton();
        DomesticPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TotalTableDomestic = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        ReportTableDomestic = new javax.swing.JTable();
        IndividualReportButton = new javax.swing.JButton();
        InterlinePanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ReportTableInterline = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        TotalTableInterline = new javax.swing.JTable();
        IndivInterlineReport = new javax.swing.JButton();
        GlobalDomesticPanel1 = new javax.swing.JPanel();
        jScrollPane15 = new javax.swing.JScrollPane();
        ReportTableDomesticGlobal1 = new javax.swing.JTable();
        jScrollPane16 = new javax.swing.JScrollPane();
        TotalTableDomesticGlobal1 = new javax.swing.JTable();
        GlobalReportButton = new javax.swing.JButton();
        GlobalInterlinePanel1 = new javax.swing.JPanel();
        jScrollPane17 = new javax.swing.JScrollPane();
        ReportTableInterlineGlobal1 = new javax.swing.JTable();
        jScrollPane18 = new javax.swing.JScrollPane();
        TotalTableInterlineGlobal1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        USDRatePanel = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        USDRateTable = new javax.swing.JTable();
        PrintUSDRateButton = new javax.swing.JButton();
        StockPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        AssignedTable = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        UnusedTable = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        UsedTable = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        StockTotalTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        RecievedTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        SubAgentTable = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        StockReport = new javax.swing.JButton();
        FromDate = new org.jdesktop.swingx.JXDatePicker();
        ToDate = new org.jdesktop.swingx.JXDatePicker();
        jPanel14 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(41, 76, 113));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel15.setBackground(new java.awt.Color(252, 68, 69));
        jPanel15.setForeground(new java.awt.Color(255, 255, 255));
        jPanel15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel15MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel15MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel15MouseExited(evt);
            }
        });

        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setText("Log Out");

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addContainerGap(85, Short.MAX_VALUE)
                .addComponent(jLabel24)
                .addGap(80, 80, 80))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
        );

        jPanel4.add(jPanel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(1290, 0, 210, 30));

        StaffNameLable.setForeground(java.awt.Color.white);
        StaffNameLable.setText("jLabel9");
        jPanel4.add(StaffNameLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 10, -1, -1));

        jLabel12.setForeground(java.awt.Color.white);
        jLabel12.setText("Name:");
        jPanel4.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, -1, -1));

        jLabel11.setForeground(java.awt.Color.white);
        jLabel11.setText("Staff ID:");
        jPanel4.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 10, -1, -1));

        StaffIDLable.setForeground(java.awt.Color.white);
        StaffIDLable.setText("jLabel8");
        jPanel4.add(StaffIDLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, -1, -1));

        jLabel13.setForeground(java.awt.Color.white);
        jLabel13.setText("Role:");
        jPanel4.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 10, 31, -1));

        StaffRoleLable.setForeground(java.awt.Color.white);
        StaffRoleLable.setText("jLabel9");
        jPanel4.add(StaffRoleLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 10, -1, -1));

        jPanel5.setBackground(new java.awt.Color(54, 97, 144));
        jPanel5.setForeground(new java.awt.Color(204, 204, 204));
        jPanel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel5MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel5MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel5MousePressed(evt);
            }
        });

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Home");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addComponent(jLabel10)
                .addContainerGap(88, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 0, 210, 30));

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel9.setForeground(java.awt.Color.white);
        jLabel9.setText("X");
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });
        jPanel4.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(1510, 0, 20, 30));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setForeground(java.awt.Color.white);
        jLabel4.setText("View Reports");
        jPanel4.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 0, -1, -1));

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1530, 30));

        jPanel1.setBackground(new java.awt.Color(238, 238, 238));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        StockReportButton.setText("View Stock Reports");
        StockReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StockReportButtonActionPerformed(evt);
            }
        });

        USDRateButton.setText("View USD Rate Report");
        USDRateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                USDRateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(StockReportButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(USDRateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(96, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(USDRateButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(StockReportButton)
                .addGap(20, 20, 20))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 30, -1, -1));

        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setText("AdvisorID:");

        GlobalReport.setText("View Global Reports");
        GlobalReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GlobalReportActionPerformed(evt);
            }
        });

        ReportTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Domestic", "Interline" }));

        ReportTypeComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Domestic", "Interline" }));

        IndividualReport.setText("View Individual Report");
        IndividualReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IndividualReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(29, 29, 29)
                        .addComponent(StaffIDField))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(GlobalReport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(IndividualReport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ReportTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ReportTypeComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 10, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(StaffIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ReportTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IndividualReport))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GlobalReport)
                    .addComponent(ReportTypeComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        DomesticPanel.setBackground(new java.awt.Color(238, 238, 238));

        TotalTableDomestic.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NBR of TKTS", "Fare Base(Local) Total", "Fare Base(USD) Tota", "Taxes Total", "Total Amount Paid", "Total Cash Payment", "Total Card Payment", "Total Commission Amounts", "Net Amounts for Agent Debit", "Total Nett Amount For Bank Remittance to \"Air Via\""
            }
        ));
        jScrollPane4.setViewportView(TotalTableDomestic);

        ReportTableDomestic.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Original Issued Number", "Fare Base (Local)", "Fare Base (USD)", "Taxes", "Total Amoutn Paid", "Cash Paymet", "Card Paymet", "Commisssion Rate", "Total Amount Paid", "Commission Amount"
            }
        ));
        jScrollPane1.setViewportView(ReportTableDomestic);

        IndividualReportButton.setText("Print Report");
        IndividualReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IndividualReportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DomesticPanelLayout = new javax.swing.GroupLayout(DomesticPanel);
        DomesticPanel.setLayout(DomesticPanelLayout);
        DomesticPanelLayout.setHorizontalGroup(
            DomesticPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DomesticPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DomesticPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1511, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(DomesticPanelLayout.createSequentialGroup()
                        .addComponent(IndividualReportButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        DomesticPanelLayout.setVerticalGroup(
            DomesticPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DomesticPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IndividualReportButton))
        );

        jPanel1.add(DomesticPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 190, -1, -1));

        InterlinePanel.setBackground(new java.awt.Color(238, 238, 238));

        ReportTableInterline.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Original Issued Number", "USD", "USD/Local", "Local", "Local Taxes", "Other Taxes", "Total Documents Amount", "Cash Payment", "Card Payment", "Commisssion Rate", "Total Amount Paid", "Commission Amount", "Non Assess-Amounts"
            }
        ));
        jScrollPane2.setViewportView(ReportTableInterline);

        TotalTableInterline.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NBR of TKTS", "USD", "USD/Local", "Local", "Local Taxes", "Other Taxes", "Total Documented Amount", "Total Cash", "Total Card", "Total Amount Paid", "Non Asses Amount Total ", "Total Commission Amount", "Net Amount For Aget Debit", "Total Nett AMount For Bank Permittence to 'Air Via'"
            }
        ));
        jScrollPane5.setViewportView(TotalTableInterline);

        IndivInterlineReport.setText("Print Report");
        IndivInterlineReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IndivInterlineReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout InterlinePanelLayout = new javax.swing.GroupLayout(InterlinePanel);
        InterlinePanel.setLayout(InterlinePanelLayout);
        InterlinePanelLayout.setHorizontalGroup(
            InterlinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InterlinePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InterlinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1491, Short.MAX_VALUE)
                    .addGroup(InterlinePanelLayout.createSequentialGroup()
                        .addComponent(IndivInterlineReport)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        InterlinePanelLayout.setVerticalGroup(
            InterlinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InterlinePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(IndivInterlineReport))
        );

        jPanel1.add(InterlinePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 190, -1, -1));

        GlobalDomesticPanel1.setBackground(new java.awt.Color(238, 238, 238));

        ReportTableDomesticGlobal1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AGNT NMBR", "TTL TKT RPRTED NMBR", "Fare Base(Local)", "Fare Base(USD)", "Taxes", "Cash", "Card", "Total Amount Paid", "Commission Assesiable Amount"
            }
        ));
        jScrollPane15.setViewportView(ReportTableDomesticGlobal1);

        TotalTableDomesticGlobal1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AGNT NMBR", "TTL TKT RPRTED NMBR", "Local Total", "USD Total", "Total Taxes", "Total Cash", "Total Card", "Total Amount Paid", "Total Commission Assesible Amount", "Total Commission Amount", "Net Amounts for Agent Debit", "Total Nett Amount For Bank Remittance to \"Air Via\""
            }
        ));
        jScrollPane16.setViewportView(TotalTableDomesticGlobal1);

        GlobalReportButton.setText("Print Report");
        GlobalReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GlobalReportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout GlobalDomesticPanel1Layout = new javax.swing.GroupLayout(GlobalDomesticPanel1);
        GlobalDomesticPanel1.setLayout(GlobalDomesticPanel1Layout);
        GlobalDomesticPanel1Layout.setHorizontalGroup(
            GlobalDomesticPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GlobalDomesticPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(GlobalDomesticPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(GlobalDomesticPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(GlobalReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(GlobalDomesticPanel1Layout.createSequentialGroup()
                        .addGroup(GlobalDomesticPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane16, javax.swing.GroupLayout.DEFAULT_SIZE, 1491, Short.MAX_VALUE)
                            .addComponent(jScrollPane15))
                        .addContainerGap())))
        );
        GlobalDomesticPanel1Layout.setVerticalGroup(
            GlobalDomesticPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GlobalDomesticPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(GlobalReportButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(GlobalDomesticPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 170, -1, -1));

        GlobalInterlinePanel1.setBackground(new java.awt.Color(238, 238, 238));

        ReportTableInterlineGlobal1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Advisor Number", "DOC NMBRS ACPNS", "Fare Amount", "Local Taxes", "Other Taxes", "Total Document's Amount", "Cash Payment", "Card Payment", "Total Amount Paid", "Commission Assessable Amount", "Non-Assess Amounts"
            }
        ));
        jScrollPane17.setViewportView(ReportTableInterlineGlobal1);

        TotalTableInterlineGlobal1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Advisors Numbers TTLS", "DOC NMBRS ACPNS TTLS", "Total Fare Amount", "Total Local Taxes", "Total Other Taxes", "Total Document's Amount", "Total Cash Payment", "Total Card Payment", "Total Amount Paid", "Commission Assessable Amounts", "Non Assess Amounts", "Total Commission Amounts", "Net Amount For Agent Debit", "Total Nett Amount For Bank Remittance to \"Air Via\""
            }
        ));
        jScrollPane18.setViewportView(TotalTableInterlineGlobal1);

        jButton1.setText("Print Report");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout GlobalInterlinePanel1Layout = new javax.swing.GroupLayout(GlobalInterlinePanel1);
        GlobalInterlinePanel1.setLayout(GlobalInterlinePanel1Layout);
        GlobalInterlinePanel1Layout.setHorizontalGroup(
            GlobalInterlinePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GlobalInterlinePanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(GlobalInterlinePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(GlobalInterlinePanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jButton1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(GlobalInterlinePanel1Layout.createSequentialGroup()
                        .addGroup(GlobalInterlinePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane18, javax.swing.GroupLayout.DEFAULT_SIZE, 1503, Short.MAX_VALUE)
                            .addComponent(jScrollPane17))
                        .addContainerGap())))
        );
        GlobalInterlinePanel1Layout.setVerticalGroup(
            GlobalInterlinePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GlobalInterlinePanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1))
        );

        jPanel1.add(GlobalInterlinePanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, 1523, 330));

        USDRatePanel.setBackground(new java.awt.Color(238, 238, 238));

        USDRateTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Exchange Rate", "Total Blanks", "Total Amount Paid Local", "Total Local Taxes", "Total Other Taxes", "Total Amount Paid", "Cash Paymet", "Card Payment", "Total Amount Paid"
            }
        ));
        jScrollPane9.setViewportView(USDRateTable);

        PrintUSDRateButton.setText("Print Report");
        PrintUSDRateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrintUSDRateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout USDRatePanelLayout = new javax.swing.GroupLayout(USDRatePanel);
        USDRatePanel.setLayout(USDRatePanelLayout);
        USDRatePanelLayout.setHorizontalGroup(
            USDRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, USDRatePanelLayout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addGroup(USDRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PrintUSDRateButton)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 1366, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(93, 93, 93))
        );
        USDRatePanelLayout.setVerticalGroup(
            USDRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(USDRatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(PrintUSDRateButton)
                .addContainerGap(144, Short.MAX_VALUE))
        );

        jPanel1.add(USDRatePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 320, -1, 340));

        StockPanel.setBackground(new java.awt.Color(238, 238, 238));

        AssignedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Staff ID", "From", "To", "AMNT"
            }
        ));
        jScrollPane3.setViewportView(AssignedTable);
        if (AssignedTable.getColumnModel().getColumnCount() > 0) {
            AssignedTable.getColumnModel().getColumn(3).setHeaderValue("AMNT");
        }

        UnusedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Staff ID", "From", "To", "AMNT"
            }
        ));
        jScrollPane6.setViewportView(UnusedTable);

        UsedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Staff ID", "From", "To", "AMNT"
            }
        ));
        jScrollPane7.setViewportView(UsedTable);

        StockTotalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Recieved Agetns", "Recieved SubAgets", "Assigned SubAgents", "Used SubAgets", "Final Agent Amount", "Final SubAgent Amount"
            }
        ));
        jScrollPane8.setViewportView(StockTotalTable);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Unused");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Assigned");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Used");

        RecievedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Staff ID", "From", "To", "AMNT"
            }
        ));
        jScrollPane10.setViewportView(RecievedTable);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Recieved");

        SubAgentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Staff ID", "From", "To", "AMNT"
            }
        ));
        jScrollPane11.setViewportView(SubAgentTable);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Sub Agents Amount");

        StockReport.setText("Print Report");
        StockReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StockReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout StockPanelLayout = new javax.swing.GroupLayout(StockPanel);
        StockPanel.setLayout(StockPanelLayout);
        StockPanelLayout.setHorizontalGroup(
            StockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StockPanelLayout.createSequentialGroup()
                .addGroup(StockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StockPanelLayout.createSequentialGroup()
                        .addGroup(StockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(StockPanelLayout.createSequentialGroup()
                                .addGap(73, 73, 73)
                                .addGroup(StockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(StockPanelLayout.createSequentialGroup()
                                        .addGap(188, 188, 188)
                                        .addComponent(jLabel2)
                                        .addGap(351, 351, 351)
                                        .addComponent(jLabel7))
                                    .addGroup(StockPanelLayout.createSequentialGroup()
                                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(StockPanelLayout.createSequentialGroup()
                                .addGroup(StockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(StockPanelLayout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, StockPanelLayout.createSequentialGroup()
                                        .addGap(189, 189, 189)
                                        .addComponent(jLabel6)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(StockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(StockPanelLayout.createSequentialGroup()
                                        .addGap(191, 191, 191)
                                        .addComponent(jLabel5))
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(StockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(StockPanelLayout.createSequentialGroup()
                                .addGap(202, 202, 202)
                                .addComponent(jLabel3))
                            .addGroup(StockPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(StockPanelLayout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addGroup(StockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(StockReport)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 1367, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        StockPanelLayout.setVerticalGroup(
            StockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StockPanelLayout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(StockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StockPanelLayout.createSequentialGroup()
                        .addGroup(StockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(StockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StockPanelLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(7, 7, 7)
                .addGroup(StockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel7))
                .addGap(17, 17, 17)
                .addGroup(StockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(StockReport, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9))
        );

        jPanel1.add(StockPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 150, 1523, -1));
        jPanel1.add(FromDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 30, -1, -1));
        jPanel1.add(ToDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 30, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, -1, -1));

        jPanel14.setBackground(new java.awt.Color(238, 238, 238));
        jPanel14.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel14MouseDragged(evt);
            }
        });
        jPanel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel14MousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1530, Short.MAX_VALUE)
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1530, 30));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GlobalReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GlobalReportActionPerformed
        // TODO add your handling code here:
      //  int staffID=Integer.parseInt(StaffIDField.getText());
        String type=(String) ReportTypeComboBox1.getSelectedItem();
        Connection con=null;
        String query;
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String from = dateFormat.format(FromDate.getDate());
        String to = dateFormat.format(ToDate.getDate());
        PreparedStatement ps;
        if("Domestic".equals(type)){
            InterlinePanel.setVisible(false);
            DomesticPanel.setVisible(false);
                       GlobalDomesticPanel1.setVisible(true);
                      GlobalInterlinePanel1.setVisible(false);
                       StockPanel.setVisible(false);
                                              USDRatePanel.setVisible(false);

            //            jPanel5.setVisible(false);
            System.out.println("DOMESTIC main");
            query="SELECT blanks.staffID AS '1', \n" +
"COUNT(ticketsales.blankID) AS '2',\n" +
"SUM(ticketsales.amountPaid) - SUM(taxes.local)  AS '3',\n" +
"SUM(exchangerate.exchangeRate) * SUM(ticketsales.amountPaid - taxes.local) AS '4',\n" +
"SUM(Taxes.Local) AS '5', \n" +
"(SELECT SUM(ticketsales.amountPaid) WHERE paymentdetails.paymentType LIKE '%Cash%')AS '6', \n" +
"(SELECT SUM(ticketsales.amountPaid) WHERE paymentdetails.paymentType LIKE '%Card%')AS '7' , \n" +
"SUM(ticketsales.amountPaid) AS '8',\n" +
"commisionrate.commissionRate * SUM(ticketsales.amountPaid) AS '9'\n" +
"FROM blanks\n" +
"LEFT JOIN exchangerate ON blanks.exchangeRateID = exchangerate.exchangeRateID\n" +
"LEFT JOIN Taxes ON blanks.TaxID = Taxes.TaxID\n" +
"LEFT JOIN commisionrate ON blanks.commissionRateID = commisionrate.commissionRateID\n" +
"LEFT JOIN paymentdetails ON blanks.blankID = paymentdetails.blankID\n" +
"LEFT JOIN ticketsales ON blanks.blankID = ticketsales.blankID\n" +
"WHERE (blanks.blankID LIKE '2%' AND blanks.blankID LIKE '2%') AND blanks.staffID != -1 AND ticketsales.status = 'paid' AND (ticketsales.dateSold BETWEEN '"+from+"' AND '"+to+"')\n" +
"GROUP BY blanks.staffID";

            try{
                con=MyConnection.getConnection();
                System.out.println("Get Connection");
                ps=con.prepareStatement(query);
                ResultSet rs=ps.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)ReportTableDomesticGlobal1.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    Object o[]={rs.getString("1"),rs.getFloat("2"),rs.getFloat("3"),rs.getFloat("4"),rs.getFloat("5"),rs.getString("6"),rs.getFloat("7"),rs.getFloat("8"),rs.getFloat("9")};
                    tm.addRow(o);
                }

                updateTotalGlobal();
                con.close();
                System.out.println("Close Connection");

            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this,e);
            }

        }else{
            InterlinePanel.setVisible(false);
            DomesticPanel.setVisible(false);
                      GlobalDomesticPanel1.setVisible(false);
                       GlobalInterlinePanel1.setVisible(true);
                        StockPanel.setVisible(false);
                                               USDRatePanel.setVisible(false);

            //            jPanel5.setVisible(false);
            System.out.println("interline main");
            query="SELECT blanks.staffID AS '1',\n" +
"COUNT(blanks.blankID) AS '2',\n" +
"SUM(ticketsales.amountPaid) - SUM(taxes.local + taxes.others) AS '3',\n" +
"SUM(Taxes.Local) AS '4',\n" +
"SUM(Taxes.Others) AS '5',\n" +
"SUM(ticketsales.amountPaid) AS '6',\n" +
"(SELECT SUM(ticketsales.amountPaid) WHERE paymentdetails.paymentType LIKE '%Cash%')AS '7',\n" +
"(SELECT SUM(ticketsales.amountPaid) WHERE paymentdetails.paymentType LIKE '%Card%')AS '8',\n" +
"ticketsales.amountPaid AS '9',\n" +
"SUM(ticketsales.amountPaid) - SUM(taxes.local) - SUM(taxes.others) AS '10',\n" +
"SUM(taxes.local + taxes.others) AS '11'\n" +
"\n" +
"FROM blanks\n" +
"\n" +
"LEFT JOIN exchangerate ON blanks.exchangeRateID = exchangerate.exchangeRateID\n" +
"LEFT JOIN Taxes ON blanks.TaxID = Taxes.TaxID\n" +
"LEFT JOIN commisionrate ON blanks.commissionRateID = commisionrate.commissionRateID\n" +
"LEFT JOIN paymentdetails ON blanks.blankID = paymentdetails.blankID\n" +
"LEFT JOIN ticketsales ON blanks.blankID = ticketsales.blankID\n" +
"WHERE ticketsales.blankID LIKE '4_%' AND ticketsales.dateSold BETWEEN '"+from+"' AND '"+to+"' AND ticketsales.status = 'paid'\n" +
"GROUP BY blanks.staffID";
            try{
                con=MyConnection.getConnection();
                System.out.println("Get Connection");
                ps=con.prepareStatement(query);
                ResultSet rs=ps.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)ReportTableInterlineGlobal1.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    Object o[]={rs.getString("1"),rs.getFloat("2"),rs.getFloat("3"),rs.getFloat("4"),rs.getFloat("5"),rs.getFloat("6"),rs.getFloat("7"),rs.getFloat("8"),rs.getFloat("9"),rs.getFloat("10"),rs.getFloat("11")};
                    tm.addRow(o);
                }

                updateTotalGlobal();
                con.close();
                System.out.println("Close Connection");

            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this,e);
            }
        }
    }//GEN-LAST:event_GlobalReportActionPerformed

    /** This updates the total and displays it in the TotalTableDomestic table.
     * 
     */
    public void updateTotal(){
        int staffID=Integer.parseInt(StaffIDField.getText());
        String type=(String) ReportTypeComboBox.getSelectedItem();
        Connection con=null;
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String from = dateFormat.format(FromDate.getDate());
        String to = dateFormat.format(ToDate.getDate());
        String query;
       PreparedStatement ps;
       if(type=="Domestic"){
           System.out.println("DOMESTIC total");
        query="SELECT COUNT(ticketsales.blankID) AS '1', SUM(ticketsales.amountPaid) - SUM(taxes.local) AS '2', (SUM(ticketsales.amountPaid) - SUM(taxes.local)) * exchangerate.exchangeRate AS '3', SUM(Taxes.local) AS '4', SUM(ticketsales.amountPaid) AS '5', (SELECT SUM(ticketsales.amountPaid) WHERE paymentdetails.paymentType LIKE '%Cash%') AS '6',\n" +
"(SELECT SUM(ticketsales.amountPaid) WHERE paymentdetails.paymentType LIKE '%Card%') AS '7',\n" +
"SUM(commisionrate.commissionRate * ticketsales.amountPaid) AS '8', (SUM(ticketsales.amountPaid) - SUM(taxes.local)) - SUM(ticketsales.amountPaid * commisionrate.commissionRate) AS '9', SUM(ticketsales.amountPaid) -  SUM(commisionrate.commissionRate * ticketsales.amountPaid) AS '10' FROM blanks\n" +
"\n" +
"LEFT JOIN exchangerate ON blanks.exchangeRateID = exchangerate.exchangeRateID\n" +
"LEFT JOIN Taxes ON blanks.TaxID = Taxes.TaxID\n" +
"LEFT JOIN commisionrate ON blanks.commissionRateID = commisionrate.commissionRateID\n" +
"LEFT JOIN paymentdetails ON blanks.blankID = paymentdetails.blankID\n" +
"LEFT JOIN ticketsales ON blanks.blankID = ticketsales.blankID\n" +
"WHERE blanks.staffID ="+staffID+" AND ticketsales.status = 'paid' AND (ticketsales.dateSold BETWEEN '"+from+"' AND '"+to+"' AND blanks.blankID LIKE '1%' OR blanks.blankID LIKE '2%')";
        
         try{  
         con=MyConnection.getConnection();
         con.setAutoCommit(false);
         System.out.println("Get Connection");
         ps=con.prepareStatement(query);
         ResultSet rs=ps.executeQuery();
         DefaultTableModel tm=(DefaultTableModel)TotalTableDomestic.getModel();
         tm.setRowCount(0); 
         while(rs.next()){
             Object o[]={rs.getInt("1"),rs.getFloat("2"),rs.getFloat("3"),rs.getFloat("4"),rs.getFloat("5"),rs.getFloat("6"),rs.getFloat("7"),rs.getFloat("8"),rs.getFloat("9"),rs.getFloat("10")};
             tm.addRow(o);
         }  
         con.setAutoCommit(true);
         con.close();
         System.out.println("Close Connection");
         
    }                                           
    catch(Exception e){
        JOptionPane.showMessageDialog(this,e);
    }
        
        
        
        
        
        
       }else{
           System.out.println("INterline total");
         query="SELECT COUNT(blanks.blankID) AS '1', SUM(ticketsales.amountPaid - taxes.local - taxes.others) * exchangerate.exchangeRate  AS '2' ,\n" +
"SUM(ticketsales.amountPaid - taxes.local - taxes.others) AS '3' ,\n" +
"SUM(Taxes.local)  AS '4' ,\n" +
"SUM(Taxes.Others) AS '5',\n" +
"SUM(ticketsales.amountPaid) + SUM(Taxes.local) + SUM(Taxes.Others) AS '6',\n" +
"(SELECT SUM(ticketsales.amountPaid) WHERE paymentdetails.paymentType LIKE '%Cash%') AS '7' ,\n" +
"(SELECT SUM(ticketsales.amountPaid) WHERE paymentdetails.paymentType LIKE '%Card%') AS '8' ,\n" +
"ticketsales.amountPaid AS '9' ,\n" +
"SUM(commisionrate.commissionRate * ticketsales.amountPaid) AS '10',\n" +
"SUM(ticketsales.amountPaid) - SUM(commisionrate.commissionRate * ticketsales.amountPaid)  AS '11', SUM(ticketsales.amountPaid + taxes.local + taxes.others) - SUM(commisionrate.commissionRate * ticketsales.amountPaid) AS '12', SUM(taxes.local) + SUM(taxes.others) AS '13'\n" +
"\n" +
"FROM blanks\n" +
"LEFT JOIN exchangerate ON blanks.exchangeRateID = exchangerate.exchangeRateID\n" +
"LEFT JOIN Taxes ON blanks.TaxID = Taxes.TaxID\n" +
"LEFT JOIN commisionrate ON blanks.commissionRateID = commisionrate.commissionRateID\n" +
"LEFT JOIN paymentdetails ON blanks.blankID = paymentdetails.blankID\n" +
"LEFT JOIN ticketsales ON blanks.blankID = ticketsales.blankID\n" +
"WHERE blanks.staffid = "+staffID+" AND (ticketsales.status = 'Paid' AND blanks.blankID LIKE '4_%' AND ticketsales.dateSold BETWEEN '"+from+"' AND '"+to+"')";
         
     try{  
         
         con=MyConnection.getConnection();
         con.setAutoCommit(false);
         System.out.println("Get Connection");
         ps=con.prepareStatement(query);
         ResultSet rs=ps.executeQuery();
         DefaultTableModel tm=(DefaultTableModel)TotalTableInterline.getModel();
         tm.setRowCount(0); 
         while(rs.next()){
             Object o[]={rs.getInt("1"),rs.getFloat("2"),"-",rs.getFloat("3"),rs.getFloat("4"),rs.getFloat("5"),rs.getFloat("6"),rs.getFloat("7"),rs.getFloat("8"),rs.getFloat("9"),rs.getFloat("10"),rs.getFloat("11"),rs.getFloat("12"),rs.getFloat("13")};
             tm.addRow(o);
         }  
         con.setAutoCommit(true);
         con.close();
         System.out.println("Close Connection");
         
    }                                           
    catch(Exception e){
        JOptionPane.showMessageDialog(this,e);
    }
    
    }
    }
    

    /** This updates the global total and displayes it into the TotalTableDomesticGlobal1 table.
     * 
     */
public void updateTotalGlobal(){
       // int staffID=Integer.parseInt(StaffIDField.getText());
        String type=(String) ReportTypeComboBox1.getSelectedItem();
        Connection con=null;
         SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String from = dateFormat.format(FromDate.getDate());
        String to = dateFormat.format(ToDate.getDate());
        String query;
       PreparedStatement ps;
      if(type=="Domestic"){
           System.out.println("DOMESTIC total");
        query="SELECT COUNT(DISTINCT blanks.StaffID) AS '1',COUNT(ticketsales.blankID) AS '2', SUM(ticketsales.amountPaid) - SUM(taxes.local) AS '3', SUM(ticketsales.amountPaid - taxes.local) * exchangerate.exchangeRate AS '4', SUM(Taxes.local) AS '5', SUM(ticketsales.amountPaid) AS '6', (SELECT SUM(ticketsales.amountPaid) WHERE paymentdetails.paymentType LIKE '%Cash%')AS '7',  (SELECT SUM(ticketsales.amountPaid) WHERE paymentdetails.paymentType LIKE '%Card%')AS '8', SUM(0.05 * ticketsales.amountPaid) AS '9', SUM(ticketsales.amountPaid) - SUM(ticketsales.amountPaid * commisionrate.commissionRate) AS '10', SUM(ticketsales.amountPaid) - SUM(commisionrate.commissionRate * ticketsales.amountPaid) AS '11'\n" +
"FROM blanks\n" +
"\n" +
"LEFT JOIN exchangerate ON blanks.exchangeRateID = exchangerate.exchangeRateID\n" +
"LEFT JOIN Taxes ON blanks.TaxID = Taxes.TaxID\n" +
"LEFT JOIN commisionrate ON blanks.commissionRateID = commisionrate.commissionRateID\n" +
"LEFT JOIN paymentdetails ON blanks.blankID = paymentdetails.blankID\n" +
"LEFT JOIN ticketsales ON blanks.blankID = ticketsales.blankID\n" +
"WHERE  ticketsales.status = 'Paid' AND ticketsales.dateSold BETWEEN '"+from+"' AND '"+to+"' AND blanks.blankID LIKE '1%' OR blanks.blankID LIKE '2%'";
        
         try{  
         con=MyConnection.getConnection();
         System.out.println("Get Connection");
         ps=con.prepareStatement(query);
         ResultSet rs=ps.executeQuery();
         DefaultTableModel tm=(DefaultTableModel)TotalTableDomesticGlobal1.getModel();
         tm.setRowCount(0); 
         while(rs.next()){
             Object o[]={rs.getInt("1"),rs.getInt("2"),rs.getFloat("3"),rs.getFloat("4"),rs.getFloat("5"),rs.getFloat("6"),rs.getString("7"),rs.getFloat("8"),rs.getFloat("9"),rs.getFloat("10"),rs.getFloat("11")};
             tm.addRow(o);
         }  
         con.close();
         System.out.println("Close Connection");
         
    }                                           
    catch(Exception e){
        JOptionPane.showMessageDialog(this,e);
    }
        
        
        
        
        
        
       }else{
           System.out.println("INterline total");
         query="SELECT COUNT(DISTINCT blanks.staffID) AS '1',\n" +
"COUNT(blanks.blankID) AS '2',\n" +
"SUM(ticketsales.amountPaid) - SUM(taxes.local) - SUM(taxes.others) AS '3',\n" +
"SUM(Taxes.local) AS '4',\n" +
"SUM(Taxes.others) AS '5',\n" +
"SUM(ticketsales.amountPaid) AS '6',\n" +
"(SELECT SUM(ticketsales.amountPaid) WHERE paymentdetails.paymentType LIKE '%Cash%') AS '7',\n" +
"(SELECT SUM(ticketsales.amountPaid) WHERE paymentdetails.paymentType LIKE '%Card%')AS '8',\n" +
"SUM(ticketsales.amountPaid)AS '9',\n" +
"SUM(ticketsales.amountPaid)- SUM(taxes.local) - SUM(taxes.others) AS '10',\n" +
"SUM(taxes.local)+SUM(taxes.others) AS '11',\n" +
"commisionrate.commissionRate * (SUM(ticketsales.amountPaid) - SUM(taxes.local) - SUM(taxes.others)) AS '12',\n" +
"SUM(ticketsales.amountPaid) - SUM(ticketsales.amountPaid * commisionrate.commissionRate) AS '13',\n" +
"SUM(ticketsales.amountPaid) - SUM(commisionrate.commissionRate * ticketsales.amountPaid) AS '14'\n" +
"\n" +
"FROM blanks\n" +
"LEFT JOIN exchangerate ON blanks.exchangeRateID = exchangerate.exchangeRateID\n" +
"LEFT JOIN Taxes ON blanks.TaxID = Taxes.TaxID\n" +
"LEFT JOIN commisionrate ON blanks.commissionRateID = commisionrate.commissionRateID\n" +
"LEFT JOIN paymentdetails ON blanks.blankID = paymentdetails.blankID\n" +
"LEFT JOIN ticketsales ON blanks.blankID = ticketsales.blankID\n" +
"WHERE blanks.blankID LIKE '4_%' AND ticketsales.status = 'paid' AND ticketsales.dateSold BETWEEN '"+from+"' AND '"+to+"'";
     try{  
         con=MyConnection.getConnection();
         System.out.println("Get Connection");
         ps=con.prepareStatement(query);
         ResultSet rs=ps.executeQuery();
         DefaultTableModel tm=(DefaultTableModel)TotalTableInterlineGlobal1.getModel();
         tm.setRowCount(0); 
         while(rs.next()){
             Object o[]={rs.getInt("1"),rs.getFloat("2"),rs.getFloat("3"),rs.getFloat("4"),rs.getFloat("5"),rs.getString("6"),rs.getFloat("7"),rs.getFloat("8"),rs.getFloat("9"),rs.getFloat("10"),rs.getFloat("11"),rs.getFloat("12"),rs.getFloat("13"),rs.getFloat("14")};
             tm.addRow(o);
         }  
         con.close();
         System.out.println("Close Connection");
         
    }                                           
    catch(Exception e){
        JOptionPane.showMessageDialog(this,e);
    }
    
    }
    }


    
    
    
    
    private void StockReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StockReportButtonActionPerformed
        // TODO add your handling code here:
         StockPanel.setVisible(true);
          InterlinePanel.setVisible(false);
            DomesticPanel.setVisible(false);
                      GlobalDomesticPanel1.setVisible(false);
                       GlobalInterlinePanel1.setVisible(false);
                                              USDRatePanel.setVisible(false);

                                              
                                               SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String from = dateFormat.format(FromDate.getDate());
        String to = dateFormat.format(ToDate.getDate());
         Connection con=null;
       PreparedStatement ps;
       String recieved;
       recieved="SELECT blanks.staffID AS 'staffID_1' , MIN(blanks.blankID) AS 'min_1', MAX(blanks.blankID) AS 'max_1', COUNT(blanks.blankID) AS 'AMNT_1'\n" +
"FROM blanks\n" +
"WHERE blanks.blankID LIKE '42_%' AND blanks.staffID != -1 AND blanks.dateRecieved BETWEEN '"+from+"' AND '"+to+"'\n" +
"GROUP BY staffID\n" +
"UNION\n" +
"SELECT blanks.staffID AS 'staffID_1' , MIN(blanks.blankID) AS 'min_1', MAX(blanks.blankID) AS 'max_1', COUNT(blanks.blankID) AS 'AMNT_1'\n" +
"FROM blanks\n" +
"WHERE blanks.blankID LIKE '44_%' AND blanks.staffID != -1 AND blanks.dateRecieved BETWEEN '"+from+"' AND '"+to+"'\n" +
"UNION\n" +
"SELECT blanks.staffID AS 'staffID_1' , MIN(blanks.blankID) AS 'min_1', MAX(blanks.blankID) AS 'max_1', COUNT(blanks.blankID) AS 'AMNT_1'\n" +
"FROM blanks\n" +
"WHERE blanks.blankID LIKE '2_%' AND blanks.staffID != -1 AND blanks.dateRecieved BETWEEN '"+from+"' AND '"+to+"'\n" +
"GROUP BY staffID\n" +
"UNION\n" +
"SELECT blanks.staffID AS 'staffID_1' , MIN(blanks.blankID) AS 'min_1', MAX(blanks.blankID) AS 'max_1', COUNT(blanks.blankID) AS 'AMNT_1'\n" +
"FROM blanks\n" +
"WHERE blanks.blankID LIKE '1_%' AND blanks.staffID != -1 AND blanks.dateRecieved BETWEEN '"+from+"' AND '"+to+"'\n" +
"GROUP BY staffID";
       
       String used;
       used="SELECT blanks.staffID AS 'staffID_2' , MIN(blanks.blankID) AS 'min_2', MAX(blanks.blankID) AS 'max_2', COUNT(blanks.blankID) AS 'AMNT_2'\n" +
"FROM blanks\n" +
"LEFT JOIN ticketsales ON blanks.blankID = ticketsales.blankID\n" +
"WHERE  blanks.blankID LIKE '42_%' AND blanks.staffID != -1 AND ticketsales.dateSold BETWEEN '"+from+"' AND '"+to+"'\n" +
"GROUP BY blanks.staffID\n" +
"UNION\n" +
"SELECT blanks.staffID AS 'staffID_2' , MIN(blanks.blankID) AS 'min_2', MAX(blanks.blankID) AS 'max_2', COUNT(blanks.blankID) AS 'AMNT_2'\n" +
"FROM blanks\n" +
"LEFT JOIN ticketsales ON blanks.blankID = ticketsales.blankID\n" +
"WHERE blanks.blankID LIKE '44_%' AND blanks.staffID != -1 AND ticketsales.dateSold BETWEEN '"+from+"' AND '"+to+"'\n" +
"GROUP BY blanks.staffID\n" +
"UNION\n" +
"SELECT blanks.staffID AS 'staffID_2' , MIN(blanks.blankID) AS 'min_2', MAX(blanks.blankID) AS 'max_2', COUNT(blanks.blankID) AS 'AMNT_2'\n" +
"FROM blanks\n" +
"LEFT JOIN ticketsales ON blanks.blankID = ticketsales.blankID\n" +
"WHERE blanks.blankID LIKE '2_%' AND blanks.staffID != -1 AND ticketsales.dateSold BETWEEN '"+from+"' AND '"+to+"'\n" +
"GROUP BY blanks.staffID\n" +
"UNION\n" +
"SELECT blanks.staffID AS 'staffID_2' , MIN(blanks.blankID) AS 'min_2', MAX(blanks.blankID) AS 'max_2', COUNT(blanks.blankID) AS 'AMNT_2'\n" +
"FROM blanks\n" +
"LEFT JOIN ticketsales ON blanks.blankID = ticketsales.blankID\n" +
"WHERE blanks.blankID LIKE '1_%' AND blanks.staffID != -1 AND ticketsales.dateSold BETWEEN '"+from+"' AND '"+to+"'\n" +
"GROUP BY blanks.staffID";
       
       
       String assigned;
       assigned="SELECT blanks.staffID AS 'staffID_3' , MIN(blanks.blankID) AS 'min_3', MAX(blanks.blankID) AS 'max_3', COUNT(blanks.blankID) AS 'AMNT_3'\n" +
"FROM blanks\n" +
"WHERE blanks.blankID LIKE '42%' AND blanks.staffID != -1 AND blanks.status LIKE 'assigned'AND blanks.dateAssigned BETWEEN '"+from+"' AND '"+to+"'\n" +
"UNION\n" +
"SELECT blanks.staffID AS 'staffID_3' , MIN(blanks.blankID) AS 'min_3', MAX(blanks.blankID) AS 'max_3', COUNT(blanks.blankID) AS 'AMNT_3'\n" +
"FROM blanks\n" +
"WHERE blanks.blankID LIKE '44%' AND blanks.staffID != -1 AND blanks.status LIKE 'assigned'AND blanks.dateAssigned BETWEEN '"+from+"' AND '"+to+"'\n" +
"UNION\n" +
"SELECT blanks.staffID AS 'staffID_3' , MIN(blanks.blankID) AS 'min_3', MAX(blanks.blankID) AS 'max_3', COUNT(blanks.blankID) AS 'AMNT_3'\n" +
"FROM blanks\n" +
"WHERE blanks.blankID LIKE '1%' AND blanks.staffID != -1 AND blanks.status LIKE 'assigned'AND blanks.dateAssigned BETWEEN '"+from+"' AND '"+to+"'\n" +
"UNION\n" +
"SELECT blanks.staffID AS 'staffID_3' , MIN(blanks.blankID) AS 'min_3', MAX(blanks.blankID) AS 'max_3', COUNT(blanks.blankID) AS 'AMNT_3' \n" +
"FROM blanks\n" +
"WHERE blanks.blankID LIKE '2%' AND blanks.staffID != -1 AND blanks.status LIKE 'assigned'AND blanks.dateAssigned BETWEEN '"+from+"' AND '"+to+"'";
       
       String unused;
       unused="SELECT blanks.staffID AS 'staffID_4' , MIN(blanks.blankID) AS 'min_4', MAX(blanks.blankID) AS 'max_4', COUNT(blanks.blankID) AS 'AMNT_4'\n" +
"FROM blanks\n" +
"WHERE status = 'Unused' AND blanks.blankID LIKE '42_%' AND blanks.staffID != -1 AND blanks.dateAssigned BETWEEN '"+from+"' AND '"+to+"'\n" +
"GROUP BY staffID\n" +
"UNION\n" +
"SELECT blanks.staffID AS 'staffID_4' , MIN(blanks.blankID) AS 'min_4', MAX(blanks.blankID) AS 'max_4', COUNT(blanks.blankID) AS 'AMNT_4'\n" +
"FROM blanks\n" +
"WHERE status = 'Unused' AND blanks.blankID LIKE '44_%' AND blanks.staffID != -1 AND blanks.dateAssigned BETWEEN '"+from+"' AND '"+to+"'\n" +
"GROUP BY staffID\n" +
"UNION\n" +
"SELECT blanks.staffID AS 'staffID_4' , MIN(blanks.blankID) AS 'min_4', MAX(blanks.blankID) AS 'max_4', COUNT(blanks.blankID) AS 'AMNT_4'\n" +
"FROM blanks\n" +
"WHERE status = 'Unused' AND blanks.blankID LIKE '2_%' AND blanks.staffID != -1 AND blanks.dateAssigned BETWEEN '"+from+"' AND '"+to+"'\n" +
"GROUP BY staffID\n" +
"UNION\n" +
"SELECT blanks.staffID AS 'staffID_4' , MIN(blanks.blankID) AS 'min_4', MAX(blanks.blankID) AS 'max_4', COUNT(blanks.blankID) AS 'AMNT_4'\n" +
"FROM blanks\n" +
"WHERE status = 'Unused' AND blanks.blankID LIKE '1_%' AND blanks.staffID != -1 AND blanks.dateAssigned BETWEEN '"+from+"' AND '"+to+"'\n" +
"GROUP BY staffID";
       
       
       String subAgent;
       subAgent="SELECT blanks.staffID AS 'staffID_5' , MIN(blanks.blankID) AS 'min_5', MAX(blanks.blankID) AS 'max_5', COUNT(blanks.blankID) AS 'AMNT_5'\n" +
"FROM blanks\n" +
"WHERE status != 'Paid' AND blanks.blankID LIKE '42%' AND blanks.staffID != -1  AND blanks.dateAssigned BETWEEN '"+from+"' AND '"+to+"'\n" +
"GROUP BY staffID\n" +
"UNION\n" +
"SELECT blanks.staffID AS 'staffID_5' , MIN(blanks.blankID) AS 'min_5', MAX(blanks.blankID) AS 'max_5', COUNT(blanks.blankID) AS 'AMNT_5'\n" +
"FROM blanks\n" +
"WHERE status != 'Paid' AND blanks.blankID LIKE '44%' AND blanks.staffID != -1 AND blanks.dateAssigned BETWEEN '"+from+"' AND '"+to+"'\n" +
"GROUP BY staffID\n" +
"UNION\n" +
"SELECT blanks.staffID AS 'staffID_5' , MIN(blanks.blankID) AS 'min_5', MAX(blanks.blankID) AS 'max_5', COUNT(blanks.blankID) AS 'AMNT_5'\n" +
"FROM blanks\n" +
"WHERE status != 'Paid' AND blanks.blankID LIKE '2%' AND blanks.staffID != -1 AND blanks.dateAssigned BETWEEN '"+from+"' AND '"+to+"'\n" +
"GROUP BY staffID\n" +
"UNION\n" +
"SELECT blanks.staffID AS 'staffID_5' , MIN(blanks.blankID) AS 'min_5', MAX(blanks.blankID) AS 'max_5', COUNT(blanks.blankID) AS 'AMNT_5'\n" +
"FROM blanks\n" +
"WHERE status != 'Paid' AND blanks.blankID LIKE '1%' AND blanks.staffID != -1 AND blanks.dateAssigned BETWEEN '"+from+"' AND '"+to+"'\n" +
"GROUP BY staffID";
       
       String total;
       total="SELECT COUNT(blanks.blankID) AS '1' ,\n" +
"(SELECT COUNT(blankID) FROM blanks WHERE status='Assigned' AND blanks.dateRecieved BETWEEN '"+from+"' AND '"+to+"') AS '2',\n" +
"(SELECT COUNT(blankID) FROM blanks WHERE status='Assigned') AS '3',\n" +
"(SELECT COUNT(blankID) FROM ticketsales WHERE ticketsales.dateSold BETWEEN '"+from+"' AND '"+to+"' ) AS '4',\n" +
"(SELECT COUNT(blankID) FROM blanks WHERE status='Assigned') - (SELECT COUNT(blankID) FROM ticketsales WHERE ticketsales.dateSold BETWEEN '"+from+"' AND '"+to+"') AS '5',\n" +
"(SELECT COUNT(blankID) FROM blanks WHERE status='Assigned') - (SELECT COUNT(blankID) FROM ticketsales WHERE ticketsales.dateSold BETWEEN '"+from+"' AND '"+to+"') AS '6'\n" +
"FROM blanks\n" +
"LEFT JOIN ticketsales on blanks.blankID = ticketsales.blankID\n" +
" WHERE blanks.status = 'unused' AND blanks.dateRecieved BETWEEN '"+from+"' AND '"+to+"'";
       
       
       
       

     try{  
         for(int i=0;i<7;i++){
           if(i==0){
               System.out.println("Filling unusedTable 1");
            con=MyConnection.getConnection();
             System.out.println("Get Connection");
             ps=con.prepareStatement(recieved);
             
             ResultSet rs=ps.executeQuery();
         DefaultTableModel tm0=(DefaultTableModel)RecievedTable.getModel();
          tm0.setRowCount(0);
              while(rs.next()){
         
         Object o0[]={rs.getInt("staffID_1"),rs.getLong("min_1"),rs.getLong("max_1"),rs.getInt("AMNT_1")};
         tm0.addRow(o0);
              }
              con.close();
         System.out.println("Close Connection");
           }if(i==1){
               System.out.println("Filling unusedTable 2");
               con=MyConnection.getConnection();
             System.out.println("Get Connection");
             ps=con.prepareStatement(used);
             
             ResultSet rs=ps.executeQuery();
         DefaultTableModel tm1=(DefaultTableModel)UsedTable.getModel();
          tm1.setRowCount(0);
              while(rs.next()){
         
          Object o1[]={rs.getInt("staffID_2"),rs.getLong("min_2"),rs.getLong("max_2"),rs.getInt("AMNT_2")};
          tm1.addRow(o1);
              }
              con.close();
         System.out.println("Close Connection");
           } if(i==2){
               System.out.println("Filling unusedTable 3");
                      con=MyConnection.getConnection();
             System.out.println("Get Connection");
             ps=con.prepareStatement(assigned);
             
             ResultSet rs=ps.executeQuery();
         DefaultTableModel tm2=(DefaultTableModel)AssignedTable.getModel();
          tm2.setRowCount(0);
              while(rs.next()){
         
            Object o2[]={rs.getInt("staffID_3"),rs.getLong("min_3"),rs.getLong("max_3"),rs.getInt("AMNT_3")};
          tm2.addRow(o2);
              }
              con.close();
         System.out.println("Close Connection");
           }
           if(i==3){
               System.out.println("Filling unusedTable 4");
                      con=MyConnection.getConnection();
             System.out.println("Get Connection");
             ps=con.prepareStatement(unused);
             
             ResultSet rs=ps.executeQuery();
         DefaultTableModel tm3=(DefaultTableModel)UnusedTable.getModel();
          tm3.setRowCount(0);
              while(rs.next()){
         
            Object o3[]={rs.getInt("staffID_4"),rs.getLong("min_4"),rs.getLong("max_4"),rs.getInt("AMNT_4")};
          tm3.addRow(o3);
              }
              con.close();
         System.out.println("Close Connection");
           }
           if(i==4){
               System.out.println("Filling unusedTable 4");
                      con=MyConnection.getConnection();
             System.out.println("Get Connection");
             ps=con.prepareStatement(subAgent);
             
             ResultSet rs=ps.executeQuery();
         DefaultTableModel tm4=(DefaultTableModel)SubAgentTable.getModel();
          tm4.setRowCount(0);
              while(rs.next()){
         
            Object o4[]={rs.getInt("staffID_5"),rs.getLong("min_5"),rs.getLong("max_5"),rs.getInt("AMNT_5")};
          tm4.addRow(o4);
              }
              con.close();
           }
           if(i==5){
               System.out.println("Filling unusedTable 4");
                      con=MyConnection.getConnection();
             System.out.println("Get Connection");
             ps=con.prepareStatement(total);
             
             ResultSet rs=ps.executeQuery();
         DefaultTableModel tm5=(DefaultTableModel)StockTotalTable.getModel();
          tm5.setRowCount(0);
              while(rs.next()){
         
            Object o5[]={rs.getInt("1"),rs.getInt("2"),rs.getInt("3"),rs.getInt("4"),rs.getInt("5"),rs.getInt("6")};
          tm5.addRow(o5);
              }
              con.close();
           }

         }
     }
       
    catch(Exception e){
        JOptionPane.showMessageDialog(this,"Errot in the code"+e);
    }
         
        
        
    }//GEN-LAST:event_StockReportButtonActionPerformed

    private void IndividualReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IndividualReportActionPerformed
        // TODO add your handling code here:
        int staffID=Integer.parseInt(StaffIDField.getText());
        String type=(String) ReportTypeComboBox.getSelectedItem();
        Connection con=null;
        String query;
        PreparedStatement ps;
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String from = dateFormat.format(FromDate.getDate());
        String to = dateFormat.format(ToDate.getDate());
        if("Domestic".equals(type)){
            DomesticPanel.setVisible(true);
            InterlinePanel.setVisible(false);
             StockPanel.setVisible(false);  
                      GlobalDomesticPanel1.setVisible(false);
                       GlobalInterlinePanel1.setVisible(false);
                                              USDRatePanel.setVisible(false);

            System.out.println("DOMESTIC main");
            query="SELECT\n" +
"blanks.blankID AS '1', ticketsales.amountPaid - taxes.local AS '2', (ticketsales.amountPaid - taxes.local) * exchangerate.exchangeRate AS '3',\n" +
"Taxes.local AS '4',\n" +
"ticketsales.amountPaid AS '5' ,\n" +
"(SELECT ticketsales.amountPaid  WHERE paymentdetails.paymentType LIKE '%Cash%') AS '6',\n" +
"(SELECT ticketsales.amountPaid  WHERE paymentdetails.paymentType LIKE '%Card%') AS '7', commisionrate.commissionRate AS '8',\n" +
"ticketsales.amountPaid AS '9',\n" +
"ticketsales.amountPaid * commisionrate.commissionRate AS '10'\n" +
"FROM blanks\n" +
"LEFT JOIN Taxes ON blanks.TaxID = Taxes.TaxID\n" +
"LEFT JOIN exchangerate ON blanks.exchangeRateID = exchangerate.exchangeRateID\n" +
"LEFT JOIN commisionrate ON blanks.commissionRateID = commisionrate.commissionRateID\n" +
"LEFT JOIN paymentdetails ON blanks.blankID = paymentdetails.blankID\n" +
"LEFT JOIN ticketsales ON blanks.blankID = ticketsales.blankID\n" +
"WHERE blanks.staffID = "+staffID+" AND ticketsales.status = 'paid'  AND (ticketsales.currency = 'Local%' AND ticketsales.dateSold BETWEEN '"+from+"' AND '"+to+"' AND blanks.blankID LIKE '1%' OR blanks.blankID LIKE '2_%')";
            try{
                con=MyConnection.getConnection();
                con.setAutoCommit(false);
                System.out.println("Get Connection");
                ps=con.prepareStatement(query);
                ResultSet rs=ps.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)ReportTableDomestic.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    Object o[]={rs.getString("1"),rs.getFloat("2"),rs.getFloat("3"),rs.getFloat("4"),rs.getFloat("5"),rs.getFloat("6"),rs.getFloat("7"),rs.getFloat("8"),rs.getFloat("9"),rs.getFloat("10")};
                    tm.addRow(o);
                }

                updateTotal();
                con.setAutoCommit(true);
                con.close();
                System.out.println("Close Connection");

            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this,e);
            }

        }else{
             DomesticPanel.setVisible(false);
            InterlinePanel.setVisible(true);
             StockPanel.setVisible(false);  
                      GlobalDomesticPanel1.setVisible(false);
                       GlobalInterlinePanel1.setVisible(false);
                                              USDRatePanel.setVisible(false);

            System.out.println("interline main");
            query="SELECT blanks.blankID AS '1',\n" +
            "(ticketsales.amountPaid - taxes.local - taxes.others) * exchangerate.exchangeRate AS '2',\n" +
            "exchangerate.exchangeRate AS '3',\n" +
            "ticketsales.amountPaid - taxes.local - taxes.others AS '4',\n" +
            "Taxes.local AS '5',\n" +
            "Taxes.Others AS '6',\n" +
            "ticketsales.amountPaid  AS '7',\n" +
            "(SELECT ticketsales.amountPaid  WHERE paymentdetails.paymentType LIKE '%Cash%') AS '8',\n" +
            "(SELECT ticketsales.amountPaid  WHERE paymentdetails.paymentType LIKE '%Card%') AS '9' ,\n" +
            "commisionrate.commissionRate AS '10',\n" +
            "(SELECT ticketsales.amountPaid  WHERE blanks.status = 'Paid') AS '11',\n" +
            "ticketsales.amountPaid * commisionrate.commissionRate AS '12',\n" +
            "taxes.local + taxes.others AS '13'\n" +
            "FROM blanks\n" +
            "LEFT JOIN Taxes ON blanks.TaxID = Taxes.TaxID\n" +
            "LEFT JOIN exchangerate ON blanks.exchangeRateID = exchangerate.exchangeRateID\n" +
            "LEFT JOIN commisionrate ON blanks.commissionRateID = commisionrate.commissionRateID\n" +
            "LEFT JOIN paymentdetails ON blanks.blankID = paymentdetails.blankID\n" +
            "LEFT JOIN ticketsales ON blanks.blankID = ticketsales.blankID\n" +
            "WHERE blanks.staffID = "+staffID+" AND ticketsales.status = 'paid' AND blanks.blankID LIKE '4%' AND ticketsales.dateSold BETWEEN '"+from+"' AND '"+to+"'";
            try{
                con=MyConnection.getConnection();
                con.setAutoCommit(false);
                System.out.println("Get Connection");
                ps=con.prepareStatement(query);
                ResultSet rs=ps.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)ReportTableInterline.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    Object o[]={rs.getString("1"),rs.getFloat("2"),rs.getFloat("3"),rs.getFloat("4"),rs.getFloat("5"),rs.getFloat("6"),rs.getFloat("7"),rs.getFloat("8"),rs.getFloat("9"),rs.getFloat("10"),rs.getFloat("11"),rs.getFloat("12"),rs.getFloat("13")};
                    tm.addRow(o);
                }

                updateTotal();
                con.setAutoCommit(true);
                con.close();
                System.out.println("Close Connection");

            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this,e);
            }
        }
    }//GEN-LAST:event_IndividualReportActionPerformed

    private void USDRateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_USDRateButtonActionPerformed
        // TODO add your handling code here:
        Connection con=null;
        String query;
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String from = dateFormat.format(FromDate.getDate());
        String to = dateFormat.format(ToDate.getDate());
        PreparedStatement ps;
            InterlinePanel.setVisible(false);
            DomesticPanel.setVisible(false);
                       GlobalDomesticPanel1.setVisible(false);
                      GlobalInterlinePanel1.setVisible(false);
                       StockPanel.setVisible(false);
                       USDRatePanel.setVisible(true);
            //            jPanel5.setVisible(false);
            System.out.println("DOMESTIC main");
            query="SELECT exchangerate.exchangeRate AS '1', COUNT(blanks.blankID) AS '2',\n" +
"SUM(ticketsales.amountPaid) - SUM(taxes.local) - SUM(taxes.others) AS '3',\n" +
"SUM(taxes.local) AS '4',\n" +
"SUM(taxes.others) AS '5',\n" +
"SUM(ticketsales.amountPaid) AS '6',\n" +
"(SELECT SUM(ticketsales.amountPaid) WHERE paymentdetails.paymentType LIKE '%Cash%') AS 'Cash',\n" +
"(SELECT SUM(ticketsales.amountPaid) WHERE paymentdetails.paymentType LIKE '%Card%') AS 'Card',\n" +
"SUM(ticketsales.amountPaid) AS '9'\n" +
"FROM blanks\n" +
"LEFT JOIN exchangerate ON blanks.exchangeRateID = exchangerate.exchangeRateID\n" +
"LEFT JOIN Taxes ON blanks.TaxID = Taxes.TaxID\n" +
"LEFT JOIN ticketsales  ON blanks.blankID = ticketsales.blankID\n" +
"LEFT JOIN paymentdetails ON blanks.blankID = paymentdetails.blankID\n" +
"WHERE exchangerate.exchangeRate IS NOT NULL AND (exchangerate.date BETWEEN '"+from+"' AND '"+to+"') AND blanks.blankID LIKE '4%'\n" +
"GROUP BY exchangerate.exchangeRate";

            try{
                con=MyConnection.getConnection();
                System.out.println("Get Connection");
                ps=con.prepareStatement(query);
                ResultSet rs=ps.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)USDRateTable.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    Object o[]={rs.getString("1"),rs.getFloat("2"),rs.getFloat("3"),rs.getFloat("4"),rs.getFloat("5"),rs.getString("6"),rs.getFloat("Cash"),rs.getFloat("Card"),rs.getFloat("9")};
                    tm.addRow(o);
                }

                updateTotalGlobal();
                con.close();
                System.out.println("Close Connection");

            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this,e);
            }

        
        
    }//GEN-LAST:event_USDRateButtonActionPerformed

    private void jPanel15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel15MouseClicked
        // TODO add your handling code here:
        loginFrame lf = new loginFrame();
        lf.setVisible(true);
        lf.pack();
        lf.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_jPanel15MouseClicked

    private void jPanel15MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel15MouseEntered
        // TODO add your handling code here:
        jPanel15.setBackground(new Color(252, 116, 117));
    }//GEN-LAST:event_jPanel15MouseEntered

    private void jPanel15MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel15MouseExited
        // TODO add your handling code here:
        jPanel15.setBackground(new Color(252,68,69));
    }//GEN-LAST:event_jPanel15MouseExited

    private void jPanel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel5MouseClicked
        officeManager om = new officeManager(StaffIDLable.getText(),
            StaffNameLable.getText(),
            StaffRoleLable.getText());
        om.setVisible(true);
        om.pack();
        om.setLocationRelativeTo(null);

        this.dispose();
    }//GEN-LAST:event_jPanel5MouseClicked

    private void jPanel5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel5MouseEntered
        // TODO add your handling code here:
        jPanel5.setBackground(new Color(81, 135, 194));
    }//GEN-LAST:event_jPanel5MouseEntered

    private void jPanel5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel5MouseExited
        // TODO add your handling code here:
        jPanel5.setBackground(new Color(54,97,144));
    }//GEN-LAST:event_jPanel5MouseExited

    private void jPanel5MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel5MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel5MousePressed

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
        System.exit(0);
    }//GEN-LAST:event_jLabel9MouseClicked

    private void jPanel14MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel14MouseDragged
        int cordX= evt.getXOnScreen();
        int cordY = evt.getYOnScreen();

        this.setLocation(cordX-mousepX, cordY-mousepY);
    }//GEN-LAST:event_jPanel14MouseDragged

    private void jPanel14MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel14MousePressed
        mousepX = evt.getX();
        mousepY = evt.getY();
    }//GEN-LAST:event_jPanel14MousePressed

    private void PrintUSDRateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrintUSDRateButtonActionPerformed
        // TODO add your handling code here:
        String path = "";
        JFileChooser j = new JFileChooser();
        j.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int x = j.showSaveDialog(this);

        if (x==JFileChooser.APPROVE_OPTION)
        {
            path = j.getSelectedFile().getPath();
        }

        Document doc = new Document();
        doc.setPageSize(PageSize.A4.rotate());

        try {
            PdfWriter.getInstance(doc, new FileOutputStream(path+"NEW_FILE.pdf"));

            doc.open();

            PdfPTable tbl1 = new PdfPTable(9);
            PdfPCell cell1 = new PdfPCell(new Paragraph("View USD Rate Report"));
            cell1.setColspan(9);
            cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
            tbl1.addCell(cell1);

            tbl1.addCell("Exchange Rate");
            tbl1.addCell("Total Blanks");
            tbl1.addCell("Total Amount Paid Local");
            tbl1.addCell("Total Local Taxes");
            tbl1.addCell("Total Other Taxes");
            tbl1.addCell("Total Document Amount Paid");
            tbl1.addCell("Cash Payment");
            tbl1.addCell("Card Payment");
            tbl1.addCell("Total Amount Paid");
            tbl1.setSpacingAfter(25f);

            for(int i =0; i<USDRateTable.getRowCount(); i++)
            {
                String ExRate = USDRateTable.getValueAt(i, 0).toString();
                String TotalBlanks = USDRateTable.getValueAt(i,1).toString();
                String AmountPaidLocal = USDRateTable.getValueAt(i,2).toString();
                String LocalTaxes = USDRateTable.getValueAt(i,3).toString();
                String OtherTaxes = USDRateTable.getValueAt(i,4).toString();
                String DocAmountPaid = USDRateTable.getValueAt(i,5).toString();
                String Cash = USDRateTable.getValueAt(i,6).toString();
                String Card = USDRateTable.getValueAt(i,7).toString();
                String CommissionAmount = USDRateTable.getValueAt(i,8).toString();

                tbl1.addCell(ExRate);
                tbl1.addCell(TotalBlanks);
                tbl1.addCell(AmountPaidLocal);
                tbl1.addCell(LocalTaxes);
                tbl1.addCell(OtherTaxes);
                tbl1.addCell(DocAmountPaid);
                tbl1.addCell(Cash);
                tbl1.addCell(Card);
                tbl1.addCell(CommissionAmount);

            }
            doc.add(tbl1);

        } catch (FileNotFoundException ex) {
            Logger.getLogger(viewReport.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException ex) {
            Logger.getLogger(viewReport.class.getName()).log(Level.SEVERE, null, ex);
        }

        doc.close();
    }//GEN-LAST:event_PrintUSDRateButtonActionPerformed

    private void StockReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StockReportActionPerformed
        // TODO add your handling code here:
        String path = "";
        JFileChooser j = new JFileChooser();
        j.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int x = j.showSaveDialog(this);

        if (x==JFileChooser.APPROVE_OPTION)
        {
            path = j.getSelectedFile().getPath();
        }

        Document doc = new Document();
        doc.setPageSize(PageSize.A4.rotate());

        try {
            PdfWriter.getInstance(doc, new FileOutputStream(path+"Report.pdf"));

            doc.open();

            PdfPTable tbl1 = new PdfPTable(4);
            PdfPCell cell1 = new PdfPCell(new Paragraph("Assigned"));
            cell1.setColspan(4);
            cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
            tbl1.addCell(cell1);

            tbl1.addCell("Staff ID");
            tbl1.addCell("From");
            tbl1.addCell("To");
            tbl1.addCell("AMNT");
            tbl1.setSpacingAfter(25f);

            for(int i = 0; i<AssignedTable.getRowCount();i++)
            {

                String staffID = AssignedTable.getValueAt(i, 0).toString();

                String From = AssignedTable.getValueAt(i,1).toString();

                String To = AssignedTable.getValueAt(i,2).toString();

                String AMNT = AssignedTable.getValueAt(i,3).toString();

                tbl1.addCell(staffID);
                tbl1.addCell(From);
                tbl1.addCell(To);
                tbl1.addCell(AMNT);
            }

            doc.add(tbl1);

            //unused table

            PdfPTable tbl2 = new PdfPTable(4);
            PdfPCell cell2 = new PdfPCell(new Paragraph("Unused"));
            cell2.setColspan(4);
            cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            tbl2.addCell(cell2);

            tbl2.addCell("Staff ID");
            tbl2.addCell("From");
            tbl2.addCell("To");
            tbl2.addCell("AMNT");
            tbl2.setSpacingAfter(25f);

            for(int i =0; i<UnusedTable.getRowCount(); i++)
            {
                String staffID = UnusedTable.getValueAt(i, 0).toString();
                String From = UnusedTable.getValueAt(i,1).toString();
                String To = UnusedTable.getValueAt(i,2).toString();
                String AMNT = UnusedTable.getValueAt(i,3).toString();

                tbl2.addCell(staffID);
                tbl2.addCell(From);
                tbl2.addCell(To);
                tbl2.addCell(AMNT);
            }
            doc.add(tbl2);

            //used table
            PdfPTable tbl3 = new PdfPTable(4);
            PdfPCell cell3 = new PdfPCell(new Paragraph("Used"));
            cell3.setColspan(4);

            cell3.setHorizontalAlignment(Element.ALIGN_CENTER);
            tbl3.addCell(cell3);
            tbl3.addCell("Staff ID");
            tbl3.addCell("From");
            tbl3.addCell("To");
            tbl3.addCell("AMNT");
            tbl3.setSpacingAfter(25f);

            for(int i =0; i<UsedTable.getRowCount(); i++)
            {
                String staffID = UsedTable.getValueAt(i, 0).toString();
                String From = UsedTable.getValueAt(i,1).toString();
                String To = UsedTable.getValueAt(i,2).toString();
                String AMNT = UsedTable.getValueAt(i,3).toString();

                tbl3.addCell(staffID);
                tbl3.addCell(From);
                tbl3.addCell(To);
                tbl3.addCell(AMNT);
            }
            doc.add(tbl3);

            //AMNT

            PdfPTable tbl4 = new PdfPTable(3);
            PdfPCell cell4 = new PdfPCell(new Paragraph("AMNT"));
            cell4.setColspan(3);
            cell4.setHorizontalAlignment(Element.ALIGN_CENTER);
            tbl4.addCell(cell4);

            tbl4.addCell("Unused AMNT");
            tbl4.addCell("Assigned AMNT");
            tbl4.addCell("Used AMNT");
            tbl4.setSpacingAfter(25f);

            for(int i =0; i<StockTotalTable.getRowCount(); i++)
            {
                String UnusedAMNT = StockTotalTable.getValueAt(i, 0).toString();
                String AssignedAMNT = StockTotalTable.getValueAt(i,1).toString();
                String UsedAMNT = StockTotalTable.getValueAt(i,2).toString();

                tbl4.addCell(UnusedAMNT);
                tbl4.addCell(AssignedAMNT);
                tbl4.addCell(UsedAMNT);
                tbl4.setSpacingAfter(25f);

            }
            doc.add(tbl4);

            //Received

            PdfPTable tbl5 = new PdfPTable(4);
            PdfPCell cell5 = new PdfPCell(new Paragraph("Received"));
            cell5.setColspan(4);

            cell5.setHorizontalAlignment(Element.ALIGN_CENTER);
            tbl5.addCell(cell5);
            tbl5.addCell("Staff ID");
            tbl5.addCell("From");
            tbl5.addCell("To");
            tbl5.addCell("AMNT");
            tbl5.setSpacingAfter(25f);

            for(int i =0; i<RecievedTable.getRowCount(); i++)
            {
                String staffID = RecievedTable.getValueAt(i, 0).toString();
                String From = RecievedTable.getValueAt(i,1).toString();
                String To = RecievedTable.getValueAt(i,2).toString();
                String AMNT = RecievedTable.getValueAt(i,3).toString();

                tbl5.addCell(staffID);
                tbl5.addCell(From);
                tbl5.addCell(To);
                tbl5.addCell(AMNT);
            }
            doc.add(tbl5);

            //Sub Agents Amount
            PdfPTable tbl6 = new PdfPTable(4);
            PdfPCell cell6 = new PdfPCell(new Paragraph("Sub Agents Amount"));
            cell6.setColspan(4);
            cell6.setHorizontalAlignment(Element.ALIGN_CENTER);
            tbl6.addCell(cell6);

            tbl6.addCell("Staff ID");
            tbl6.addCell("From");
            tbl6.addCell("To");
            tbl6.addCell("AMNT");
            tbl6.setSpacingAfter(25f);

            for(int i =0; i<SubAgentTable.getRowCount(); i++)
            {
                String staffID = SubAgentTable.getValueAt(i, 0).toString();
                String From = SubAgentTable.getValueAt(i,1).toString();
                String To = SubAgentTable.getValueAt(i,2).toString();
                String AMNT = SubAgentTable.getValueAt(i,3).toString();

                tbl6.addCell(staffID);
                tbl6.addCell(From);
                tbl6.addCell(To);
                tbl6.addCell(AMNT);
            }
            doc.add(tbl6);

        } catch (FileNotFoundException ex) {
            Logger.getLogger(viewReport.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException ex) {
            Logger.getLogger(viewReport.class.getName()).log(Level.SEVERE, null, ex);
        }

        doc.close();
    }//GEN-LAST:event_StockReportActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String path = "";
        JFileChooser j = new JFileChooser();
        j.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int x = j.showSaveDialog(this);

        if (x==JFileChooser.APPROVE_OPTION)
        {
            path = j.getSelectedFile().getPath();
        }

        Document doc = new Document();
        doc.setPageSize(PageSize.A4.rotate());

        try {
            PdfWriter.getInstance(doc, new FileOutputStream(path+"NEW_FILE.pdf"));

            doc.open();

            PdfPTable tbl1 = new PdfPTable(11);
            PdfPCell cell1 = new PdfPCell(new Paragraph("View Indiviual Interline Report"));
            cell1.setColspan(11);
            cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
            tbl1.addCell(cell1);

            tbl1.addCell("Advisor Number");
            tbl1.addCell("DOC Number ACPNS");
            tbl1.addCell("Fare Amount");
            tbl1.addCell("Local Taxes");
            tbl1.addCell("Other Taxes");
            tbl1.addCell("Total Documents's Amount");
            tbl1.addCell("Cash Payment");
            tbl1.addCell("Card Payment");
            tbl1.addCell("Total Amount Paid");
            tbl1.addCell("Commission Assessable Amount");
            tbl1.addCell("Non Assess-Amounts");
            tbl1.setSpacingAfter(25f);

            for(int i =0; i<ReportTableInterlineGlobal1.getRowCount(); i++)
            {
                String AdvisorNo = ReportTableInterlineGlobal1.getValueAt(i, 0).toString();
                String DocNum = ReportTableInterlineGlobal1.getValueAt(i,1).toString();
                String FareAmount = ReportTableInterlineGlobal1.getValueAt(i,2).toString();
                String LocalTaxes = ReportTableInterlineGlobal1.getValueAt(i,3).toString();
                String OtherTaxes = ReportTableInterlineGlobal1.getValueAt(i,4).toString();
                String TotalDocAmount = ReportTableInterlineGlobal1.getValueAt(i,5).toString();
                String Cash = ReportTableInterlineGlobal1.getValueAt(i,6).toString();
                String Card = ReportTableInterlineGlobal1.getValueAt(i,7).toString();
                String TotalAmountPaid = ReportTableInterlineGlobal1.getValueAt(i,8).toString();
                String CommissionAmount = ReportTableInterlineGlobal1.getValueAt(i,9).toString();
                String NonAssessAmounts = ReportTableInterlineGlobal1.getValueAt(i,10).toString();

                tbl1.addCell(AdvisorNo);
                tbl1.addCell(DocNum);
                tbl1.addCell(FareAmount);
                tbl1.addCell(LocalTaxes);
                tbl1.addCell(OtherTaxes);
                tbl1.addCell(TotalDocAmount);
                tbl1.addCell(Cash);
                tbl1.addCell(Card);;
                tbl1.addCell(TotalAmountPaid);
                tbl1.addCell(CommissionAmount);
                tbl1.addCell(NonAssessAmounts);

            }
            doc.add(tbl1);

            PdfPTable tbl2 = new PdfPTable(14);
            PdfPCell cell2 = new PdfPCell(new Paragraph("View Global Report"));
            cell2.setColspan(14);
            cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            tbl2.addCell(cell2);

            tbl2.addCell("Advisor Numbers TTLS");
            tbl2.addCell("Doc Number ACPNS TTLS");
            tbl2.addCell("Total Fare Amount");
            tbl2.addCell("Total Local Taxes");
            tbl2.addCell("Total Other Taxes");
            tbl2.addCell("Total Documents Amount");
            tbl2.addCell("Total Cash Payment");
            tbl2.addCell("Total Card Payment");
            tbl2.addCell("Total Amount Paid");;
            tbl2.addCell("Commission Assessable Amount");
            tbl2.addCell("Non Assess Amounts");
            tbl2.addCell("Total Commission Amounts");
            tbl2.addCell("Net Amount For Agent Debit");
            tbl2.addCell("Total Nett Amount For Bank Remittance to \"Air Via\"");

            tbl2.setSpacingAfter(25f);

            for(int i =0; i<TotalTableInterlineGlobal1.getRowCount(); i++)
            {
                String AdvisorTTLS = TotalTableInterlineGlobal1.getValueAt(i, 0).toString();
                String DocNumber = TotalTableInterlineGlobal1.getValueAt(i,1).toString();
                String FareAmount = TotalTableInterlineGlobal1.getValueAt(i,2).toString();
                String LocalTaxes = TotalTableInterlineGlobal1.getValueAt(i,3).toString();
                String OtherTaxes = TotalTableInterlineGlobal1.getValueAt(i,4).toString();
                String TotalDocAmount = TotalTableInterlineGlobal1.getValueAt(i,5).toString();
                String TotalCash = TotalTableInterlineGlobal1.getValueAt(i,7).toString();
                String TotalCard = TotalTableInterlineGlobal1.getValueAt(i,8).toString();
                String TotalAmountPaid = TotalTableInterlineGlobal1.getValueAt(i,9).toString();
                String CommissionAssessable = TotalTableInterlineGlobal1.getValueAt(i,9).toString();
                String NonAsses = TotalTableInterlineGlobal1.getValueAt(i,10).toString();
                String TotalCommissionAmount = TotalTableInterlineGlobal1.getValueAt(i,11).toString();
                String Net = TotalTableInterlineGlobal1.getValueAt(i,12).toString();
                String TotalNet = TotalTableInterlineGlobal1.getValueAt(i,13).toString();

                tbl2.addCell(AdvisorTTLS);
                tbl2.addCell(DocNumber);
                tbl2.addCell(FareAmount);
                tbl2.addCell(LocalTaxes);
                tbl2.addCell(OtherTaxes);
                tbl2.addCell(TotalDocAmount);
                tbl2.addCell(TotalCash);
                tbl2.addCell(TotalCard);
                tbl2.addCell(TotalAmountPaid);
                tbl2.addCell(CommissionAssessable);
                tbl2.addCell(NonAsses);
                tbl2.addCell(TotalCommissionAmount);
                tbl2.addCell(Net);
                tbl2.addCell(TotalNet);

            }

            doc.add(tbl2);

        } catch (FileNotFoundException ex) {
            Logger.getLogger(viewReport.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException ex) {
            Logger.getLogger(viewReport.class.getName()).log(Level.SEVERE, null, ex);
        }

        doc.close();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void GlobalReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GlobalReportButtonActionPerformed
        // TODO add your handling code here:
        String path = "";
        JFileChooser j = new JFileChooser();
        j.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int x = j.showSaveDialog(this);

        if (x==JFileChooser.APPROVE_OPTION)
        {
            path = j.getSelectedFile().getPath();
        }

        Document doc = new Document();
        doc.setPageSize(PageSize.A4.rotate());

        try {
            PdfWriter.getInstance(doc, new FileOutputStream(path+"NEW_FILE.pdf"));

            doc.open();

            PdfPTable tbl1 = new PdfPTable(9);
            PdfPCell cell1 = new PdfPCell(new Paragraph("View Global DomesticReport"));
            cell1.setColspan(9);
            cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
            tbl1.addCell(cell1);

            tbl1.addCell("AGNT Number");
            tbl1.addCell("TTL TKT Report Number");
            tbl1.addCell("Fare Base (Local)");
            tbl1.addCell("Fare Base (USD)");
            tbl1.addCell("Taxes");
            tbl1.addCell("Cash Payment");
            tbl1.addCell("Card Payment");
            tbl1.addCell("Total Amount");
            tbl1.addCell("Commission Assesiable Amount");
            tbl1.setSpacingAfter(25f);

            for(int i =0; i<ReportTableDomesticGlobal1.getRowCount(); i++)
            {
                String AGNT = ReportTableDomesticGlobal1.getValueAt(i, 0).toString();
                String TTL = ReportTableDomesticGlobal1.getValueAt(i,1).toString();
                String FareLocal = ReportTableDomesticGlobal1.getValueAt(i,2).toString();
                String FareUSD = ReportTableDomesticGlobal1.getValueAt(i,3).toString();
                String Taxes = ReportTableDomesticGlobal1.getValueAt(i,4).toString();
                String Cash = ReportTableDomesticGlobal1.getValueAt(i,5).toString();
                String Card = ReportTableDomesticGlobal1.getValueAt(i,6).toString();
                String TotalAmount = ReportTableDomesticGlobal1.getValueAt(i,7).toString();
                String CommissionAmount = ReportTableDomesticGlobal1.getValueAt(i,8).toString();

                tbl1.addCell(AGNT);
                tbl1.addCell(TTL);
                tbl1.addCell(FareLocal);
                tbl1.addCell(FareUSD);
                tbl1.addCell(Taxes);
                tbl1.addCell(Cash);
                tbl1.addCell(Card);
                tbl1.addCell(TotalAmount);
                tbl1.addCell(CommissionAmount);

            }
            doc.add(tbl1);

            PdfPTable tbl2 = new PdfPTable(12);
            PdfPCell cell2 = new PdfPCell(new Paragraph("View Global Domestic Report"));
            cell2.setColspan(12);
            cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            tbl2.addCell(cell2);

            tbl2.addCell("AGNT Number");
            tbl2.addCell("TTL TKT Report Number");
            tbl2.addCell("Local Total");
            tbl2.addCell("USD Total");
            tbl2.addCell("Total Taxes");
            tbl2.addCell("Total Cash");
            tbl2.addCell("Total Card");
            tbl2.addCell("Total Amount Paid");
            tbl2.addCell("Total Commission Assesible Amount");
            tbl2.addCell("Total Commission Amount");
            tbl2.addCell("Net Amounts for Agent Debit");
            tbl2.addCell("Total Nett Amount For Bank Remittance to \"Air Via\"");
            tbl2.setSpacingAfter(25f);

            for(int i =0; i<TotalTableDomesticGlobal1.getRowCount(); i++)
            {
                String AGNT = TotalTableDomesticGlobal1.getValueAt(i, 0).toString();
                String TTL = TotalTableDomesticGlobal1.getValueAt(i,1).toString();
                String FareLocal = TotalTableDomesticGlobal1.getValueAt(i,2).toString();
                String FareUSD = TotalTableDomesticGlobal1.getValueAt(i,3).toString();
                String Taxes = TotalTableDomesticGlobal1.getValueAt(i,4).toString();
                String Cash = TotalTableDomesticGlobal1.getValueAt(i,5).toString();
                String Card = TotalTableDomesticGlobal1.getValueAt(i,6).toString();
                String TotalAmount = TotalTableDomesticGlobal1.getValueAt(i,7).toString();
                String CommissionAssesible = TotalTableDomesticGlobal1.getValueAt(i,8).toString();
                String CommissionAmount = TotalTableDomesticGlobal1.getValueAt(i,9).toString();
                String NetAmounts = TotalTableDomesticGlobal1.getValueAt(i,10).toString();
                String TotalNett = TotalTableDomesticGlobal1.getValueAt(i,11).toString();

                tbl2.addCell(AGNT);
                tbl2.addCell(TTL);
                tbl2.addCell(FareLocal);
                tbl2.addCell(FareUSD);
                tbl2.addCell(Taxes);
                tbl2.addCell(Cash);
                tbl2.addCell(Card);
                tbl2.addCell(TotalAmount);
                tbl2.addCell(CommissionAssesible);
                tbl2.addCell(CommissionAmount);
                tbl2.addCell(NetAmounts);
                tbl2.addCell(TotalNett);

            }

            doc.add(tbl2);

        } catch (FileNotFoundException ex) {
            Logger.getLogger(viewReport.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException ex) {
            Logger.getLogger(viewReport.class.getName()).log(Level.SEVERE, null, ex);
        }

        doc.close();
    }//GEN-LAST:event_GlobalReportButtonActionPerformed

    private void IndivInterlineReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IndivInterlineReportActionPerformed
        // TODO add your handling code here:

        String path = "";
        JFileChooser j = new JFileChooser();
        j.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int x = j.showSaveDialog(this);

        if (x==JFileChooser.APPROVE_OPTION)
        {
            path = j.getSelectedFile().getPath();
        }

        Document doc = new Document();
        doc.setPageSize(PageSize.A4.rotate());

        try {
            PdfWriter.getInstance(doc, new FileOutputStream(path+"NEW_FILE.pdf"));

            doc.open();

            PdfPTable tbl1 = new PdfPTable(13);
            PdfPCell cell1 = new PdfPCell(new Paragraph("View Indiviual Interline Report"));
            cell1.setColspan(13);
            cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
            tbl1.addCell(cell1);

            tbl1.addCell("Original Issued Number");
            tbl1.addCell("USD");
            tbl1.addCell("USD/Local");
            tbl1.addCell("Local");
            tbl1.addCell("Local Taxes");
            tbl1.addCell("Other Taxes");
            tbl1.addCell("Total Documents Amount");
            tbl1.addCell("Cash Payment");
            tbl1.addCell("Card Payment");
            tbl1.addCell("Commisssion Rate");
            tbl1.addCell("Total Amount Paid");
            tbl1.addCell("Commission Amount");
            tbl1.addCell("Non Assess-Amounts");
            tbl1.setSpacingAfter(25f);

            for(int i =0; i<ReportTableInterline.getRowCount(); i++)
            {
                String IssuedNumber = ReportTableInterline.getValueAt(i, 0).toString();
                String USD = ReportTableInterline.getValueAt(i,1).toString();
                String USDLocal = ReportTableInterline.getValueAt(i,2).toString();
                String Local = ReportTableInterline.getValueAt(i,3).toString();
                String LocalTaxes = ReportTableInterline.getValueAt(i,4).toString();
                String OtherTaxes = ReportTableInterline.getValueAt(i,5).toString();
                String TotalDocAmount = ReportTableInterline.getValueAt(i,6).toString();
                String Cash = ReportTableInterline.getValueAt(i,7).toString();
                String Card = ReportTableInterline.getValueAt(i,8).toString();
                String CommissionRate = ReportTableInterline.getValueAt(i,9).toString();
                String TotalAmountPaid = ReportTableInterline.getValueAt(i,10).toString();
                String CommissionAmount = ReportTableInterline.getValueAt(i,11).toString();
                String NonAssessAmounts = ReportTableInterline.getValueAt(i,12).toString();

                tbl1.addCell(IssuedNumber);
                tbl1.addCell(USD);
                tbl1.addCell(USDLocal);
                tbl1.addCell(Local);
                tbl1.addCell(LocalTaxes);
                tbl1.addCell(OtherTaxes);
                tbl1.addCell(TotalDocAmount);
                tbl1.addCell(Cash);
                tbl1.addCell(Card);
                tbl1.addCell(CommissionRate);
                tbl1.addCell(TotalAmountPaid);
                tbl1.addCell(CommissionAmount);
                tbl1.addCell(NonAssessAmounts);

            }
            doc.add(tbl1);

            PdfPTable tbl2 = new PdfPTable(14);
            PdfPCell cell2 = new PdfPCell(new Paragraph("View Global Report"));
            cell2.setColspan(14);
            cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            tbl2.addCell(cell2);

            tbl2.addCell("NBR of TKTS");
            tbl2.addCell("USD");
            tbl2.addCell("USD/Local");
            tbl2.addCell("Local");
            tbl2.addCell("Local Taxes");
            tbl2.addCell("Other Taxes");
            tbl2.addCell("Total Documents Amount");
            tbl2.addCell("Total Cash Payment");
            tbl2.addCell("Total Card Payment");
            tbl2.addCell("Total Amount Paid");
            tbl2.addCell("Non Asses Amount");
            tbl2.addCell("Total Commission Amount");
            tbl2.addCell("Net Amount For Aget Debit");
            tbl2.addCell("Total Nett AMount For Bank Permittence to 'Air Via'");

            tbl2.setSpacingAfter(25f);

            for(int i =0; i<TotalTableInterline.getRowCount(); i++)
            {
                String NoTickets = TotalTableInterline.getValueAt(i, 0).toString();
                String USD = TotalTableInterline.getValueAt(i,1).toString();
                String USDLocal = TotalTableInterline.getValueAt(i,2).toString();
                String Local = TotalTableInterline.getValueAt(i,3).toString();
                String LocalTaxes = TotalTableInterline.getValueAt(i,4).toString();
                String OtherTaxes = TotalTableInterline.getValueAt(i,5).toString();
                String TotalDocAmount = TotalTableInterline.getValueAt(i,6).toString();
                String TotalCash = TotalTableInterline.getValueAt(i,7).toString();
                String TotalCard = TotalTableInterline.getValueAt(i,8).toString();
                String TotalAmountPaid = TotalTableInterline.getValueAt(i,9).toString();
                String NonAsses = TotalTableInterline.getValueAt(i,10).toString();
                String TotalCommissionAmount = TotalTableInterline.getValueAt(i,11).toString();
                String Net = TotalTableInterline.getValueAt(i,12).toString();
                String TotalNet = TotalTableInterline.getValueAt(i,13).toString();

                tbl2.addCell(NoTickets);
                tbl2.addCell(USD);
                tbl2.addCell(USDLocal);
                tbl2.addCell(Local);
                tbl2.addCell(LocalTaxes);
                tbl2.addCell(OtherTaxes);
                tbl2.addCell(TotalDocAmount);
                tbl2.addCell(TotalCash);
                tbl2.addCell(TotalCard);
                tbl2.addCell(TotalAmountPaid);
                tbl2.addCell(NonAsses);
                tbl2.addCell(TotalCommissionAmount);
                tbl2.addCell(Net);
                tbl2.addCell(TotalNet);

            }

            doc.add(tbl2);

        } catch (FileNotFoundException ex) {
            Logger.getLogger(viewReport.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException ex) {
            Logger.getLogger(viewReport.class.getName()).log(Level.SEVERE, null, ex);
        }

        doc.close();

    }//GEN-LAST:event_IndivInterlineReportActionPerformed

    private void IndividualReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IndividualReportButtonActionPerformed
        // TODO add your handling code here:
        String path = "";
        JFileChooser j = new JFileChooser();
        j.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int x = j.showSaveDialog(this);

        if (x==JFileChooser.APPROVE_OPTION)
        {
            path = j.getSelectedFile().getPath();
        }

        Document doc = new Document();
        doc.setPageSize(PageSize.A4.rotate());

        try {
            PdfWriter.getInstance(doc, new FileOutputStream(path+"NEW_FILE.pdf"));

            doc.open();

            //viewIndiReport
            PdfPTable tbl7 = new PdfPTable(10);
            PdfPCell cell7 = new PdfPCell(new Paragraph("View Individual Domestic Report"));
            cell7.setColspan(10);
            cell7.setHorizontalAlignment(Element.ALIGN_CENTER);
            tbl7.addCell(cell7);

            tbl7.addCell("Original Issued Number");
            tbl7.addCell("Fare Base (Local)");
            tbl7.addCell("Fare Base (USD");
            tbl7.addCell("Taxes");
            tbl7.addCell("Total Amount Paid");
            tbl7.addCell("Cash Payment");
            tbl7.addCell("Card Payment");
            tbl7.addCell("Commission Rate");
            tbl7.addCell("Total Amount Paid");
            tbl7.addCell("Commission Amount");
            tbl7.setSpacingAfter(30f);

            for(int i =0; i<ReportTableDomestic.getRowCount(); i++)
            {
                System.out.println("1");
                String IssueNumber = ReportTableDomestic.getValueAt(i, 0).toString();
                String LocalBase = ReportTableDomestic.getValueAt(i,1).toString();
                String USDBase = ReportTableDomestic.getValueAt(i,2).toString();
                String Taxes = ReportTableDomestic.getValueAt(i,3).toString();
                String TotalAmountReceived = ReportTableDomestic.getValueAt(i,4).toString();
                String Cash = ReportTableDomestic.getValueAt(i,5).toString();
                String Card = ReportTableDomestic.getValueAt(i,6).toString();
                String CommissionRate = ReportTableDomestic.getValueAt(i,7).toString();
                String TotalAmountPaid = ReportTableDomestic.getValueAt(i,8).toString();
                String Commission = ReportTableDomestic.getValueAt(i,9).toString();

                tbl7.addCell(IssueNumber);
                tbl7.addCell(LocalBase);
                tbl7.addCell(USDBase);
                tbl7.addCell(Taxes);
                tbl7.addCell(TotalAmountReceived);
                tbl7.addCell(Cash);
                tbl7.addCell(Card);
                tbl7.addCell(CommissionRate);
                tbl7.addCell(TotalAmountPaid);
                tbl7.addCell(Commission);

            }
            doc.add(tbl7);

            //

            PdfPTable tbl8 = new PdfPTable(10);
            PdfPCell cell8 = new PdfPCell(new Paragraph("View Individual Domestic Report"));
            cell8.setColspan(10);
            cell8.setHorizontalAlignment(Element.ALIGN_CENTER);
            tbl8.addCell(cell8);

            tbl8.addCell("Number Of Tickets");
            tbl8.addCell("Fare Base (Local)");
            tbl8.addCell("Fare Base (USD");
            tbl8.addCell("Taxes Total");
            tbl8.addCell("Total Amount Paid");
            tbl8.addCell("Cash Payment");
            tbl8.addCell("Card Payment");
            tbl8.addCell("Total Commission Amounts");
            tbl8.addCell("Net Amounts for Agent Debitd");
            tbl8.addCell("Total Nett Amount For Bank Remittance to \"Air Via\"");
            tbl8.setSpacingAfter(25f);

            for(int i =0; i<TotalTableDomestic.getRowCount(); i++)
            {
                String NoTickets = TotalTableDomestic.getValueAt(i, 0).toString();
                String LocalBase = TotalTableDomestic.getValueAt(i,1).toString();
                String USDBase = TotalTableDomestic.getValueAt(i,2).toString();
                String Taxes = TotalTableDomestic.getValueAt(i,3).toString();
                String TotalAmountPaid = TotalTableDomestic.getValueAt(i,4).toString();
                String Cash = TotalTableDomestic.getValueAt(i,5).toString();
                String Card = TotalTableDomestic.getValueAt(i,6).toString();
                String CommissionAmount = TotalTableDomestic.getValueAt(i,7).toString();
                String NetAmount = TotalTableDomestic.getValueAt(i,8).toString();
                String TotalNett = TotalTableDomestic.getValueAt(i,9).toString();

                tbl8.addCell(NoTickets);
                tbl8.addCell(LocalBase);
                tbl8.addCell(USDBase);
                tbl8.addCell(Taxes);
                tbl8.addCell(TotalAmountPaid);
                tbl8.addCell(Cash);
                tbl8.addCell(Card);
                tbl8.addCell(CommissionAmount);
                tbl8.addCell(NetAmount);
                tbl8.addCell(TotalNett);
            }
            doc.add(tbl8);

        } catch (FileNotFoundException ex) {
            Logger.getLogger(viewReport.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException ex) {
            Logger.getLogger(viewReport.class.getName()).log(Level.SEVERE, null, ex);
        }

        doc.close();
    }//GEN-LAST:event_IndividualReportButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(viewReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(viewReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(viewReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(viewReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new viewReport().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AssignedTable;
    private javax.swing.JPanel DomesticPanel;
    private org.jdesktop.swingx.JXDatePicker FromDate;
    private javax.swing.JPanel GlobalDomesticPanel1;
    private javax.swing.JPanel GlobalInterlinePanel1;
    private javax.swing.JButton GlobalReport;
    private javax.swing.JButton GlobalReportButton;
    private javax.swing.JButton IndivInterlineReport;
    private javax.swing.JButton IndividualReport;
    private javax.swing.JButton IndividualReportButton;
    private javax.swing.JPanel InterlinePanel;
    private javax.swing.JButton PrintUSDRateButton;
    private javax.swing.JTable RecievedTable;
    private javax.swing.JTable ReportTableDomestic;
    private javax.swing.JTable ReportTableDomesticGlobal1;
    private javax.swing.JTable ReportTableInterline;
    private javax.swing.JTable ReportTableInterlineGlobal1;
    private javax.swing.JComboBox<String> ReportTypeComboBox;
    private javax.swing.JComboBox<String> ReportTypeComboBox1;
    private javax.swing.JTextField StaffIDField;
    private javax.swing.JLabel StaffIDLable;
    private javax.swing.JLabel StaffNameLable;
    private javax.swing.JLabel StaffRoleLable;
    private javax.swing.JPanel StockPanel;
    private javax.swing.JButton StockReport;
    private javax.swing.JButton StockReportButton;
    private javax.swing.JTable StockTotalTable;
    private javax.swing.JTable SubAgentTable;
    private org.jdesktop.swingx.JXDatePicker ToDate;
    private javax.swing.JTable TotalTableDomestic;
    private javax.swing.JTable TotalTableDomesticGlobal1;
    private javax.swing.JTable TotalTableInterline;
    private javax.swing.JTable TotalTableInterlineGlobal1;
    private javax.swing.JButton USDRateButton;
    private javax.swing.JPanel USDRatePanel;
    private javax.swing.JTable USDRateTable;
    private javax.swing.JTable UnusedTable;
    private javax.swing.JTable UsedTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    // End of variables declaration//GEN-END:variables
}
